
led_dice_stm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023e8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080024a8  080024a8  000124a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002504  08002504  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002504  08002504  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002504  08002504  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002504  08002504  00012504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002508  08002508  00012508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800250c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  2000000c  08002518  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08002518  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006268  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001634  00000000  00000000  0002629c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000650  00000000  00000000  000278d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000598  00000000  00000000  00027f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000127db  00000000  00000000  000284b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007545  00000000  00000000  0003ac93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000742a2  00000000  00000000  000421d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b647a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001514  00000000  00000000  000b64cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002490 	.word	0x08002490

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002490 	.word	0x08002490

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <getNewRandomValue>:
 *
 * @params			ADC_HandleTypeDef *hadc: Pointer to ADC object to read noise from ADC to generate a random number
 *
 * @returns			A uint8_t generated randomly
 */
uint8_t getNewRandomValue(ADC_HandleTypeDef *hadc) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	uint16_t seed;
	uint16_t temp = 1;
 8000228:	230c      	movs	r3, #12
 800022a:	18fb      	adds	r3, r7, r3
 800022c:	2201      	movs	r2, #1
 800022e:	801a      	strh	r2, [r3, #0]
	int i;

	HAL_Delay(1);
 8000230:	2001      	movs	r0, #1
 8000232:	f000 fc6b 	bl	8000b0c <HAL_Delay>
	// Make 25 readings of noise on ADC pin and shuffle their bits
	for (i = 0; i < 25; i++) {
 8000236:	2300      	movs	r3, #0
 8000238:	60bb      	str	r3, [r7, #8]
 800023a:	e03b      	b.n	80002b4 <getNewRandomValue+0x94>
		// Randomly delay last couple of measurements by 3 ms max
		if(i > 22) HAL_Delay(temp & 0b00000011);
 800023c:	68bb      	ldr	r3, [r7, #8]
 800023e:	2b16      	cmp	r3, #22
 8000240:	dd07      	ble.n	8000252 <getNewRandomValue+0x32>
 8000242:	230c      	movs	r3, #12
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	881b      	ldrh	r3, [r3, #0]
 8000248:	2203      	movs	r2, #3
 800024a:	4013      	ands	r3, r2
 800024c:	0018      	movs	r0, r3
 800024e:	f000 fc5d 	bl	8000b0c <HAL_Delay>
		seed ^= HAL_ADC_GetValue(hadc);
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	0018      	movs	r0, r3
 8000256:	f000 ffc1 	bl	80011dc <HAL_ADC_GetValue>
 800025a:	0003      	movs	r3, r0
 800025c:	b299      	uxth	r1, r3
 800025e:	200e      	movs	r0, #14
 8000260:	183b      	adds	r3, r7, r0
 8000262:	183a      	adds	r2, r7, r0
 8000264:	8812      	ldrh	r2, [r2, #0]
 8000266:	404a      	eors	r2, r1
 8000268:	801a      	strh	r2, [r3, #0]
		//Shuffle the seed
		seed = 2053 * seed + 12491;
 800026a:	0001      	movs	r1, r0
 800026c:	187b      	adds	r3, r7, r1
 800026e:	881b      	ldrh	r3, [r3, #0]
 8000270:	1c1a      	adds	r2, r3, #0
 8000272:	0252      	lsls	r2, r2, #9
 8000274:	18d2      	adds	r2, r2, r3
 8000276:	0092      	lsls	r2, r2, #2
 8000278:	18d3      	adds	r3, r2, r3
 800027a:	b29a      	uxth	r2, r3
 800027c:	187b      	adds	r3, r7, r1
 800027e:	4817      	ldr	r0, [pc, #92]	; (80002dc <getNewRandomValue+0xbc>)
 8000280:	4684      	mov	ip, r0
 8000282:	4462      	add	r2, ip
 8000284:	801a      	strh	r2, [r3, #0]
		//XOR two bytes
		temp = seed ^ (seed >> 2);
 8000286:	000a      	movs	r2, r1
 8000288:	187b      	adds	r3, r7, r1
 800028a:	881b      	ldrh	r3, [r3, #0]
 800028c:	089b      	lsrs	r3, r3, #2
 800028e:	b299      	uxth	r1, r3
 8000290:	200c      	movs	r0, #12
 8000292:	183b      	adds	r3, r7, r0
 8000294:	18ba      	adds	r2, r7, r2
 8000296:	8812      	ldrh	r2, [r2, #0]
 8000298:	404a      	eors	r2, r1
 800029a:	801a      	strh	r2, [r3, #0]
		//XOR two nibbles
		temp ^= (temp >> 2);
 800029c:	183b      	adds	r3, r7, r0
 800029e:	881b      	ldrh	r3, [r3, #0]
 80002a0:	089b      	lsrs	r3, r3, #2
 80002a2:	b299      	uxth	r1, r3
 80002a4:	183b      	adds	r3, r7, r0
 80002a6:	183a      	adds	r2, r7, r0
 80002a8:	8812      	ldrh	r2, [r2, #0]
 80002aa:	404a      	eors	r2, r1
 80002ac:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < 25; i++) {
 80002ae:	68bb      	ldr	r3, [r7, #8]
 80002b0:	3301      	adds	r3, #1
 80002b2:	60bb      	str	r3, [r7, #8]
 80002b4:	68bb      	ldr	r3, [r7, #8]
 80002b6:	2b18      	cmp	r3, #24
 80002b8:	ddc0      	ble.n	800023c <getNewRandomValue+0x1c>
	}

	// Return remainder of division by 6, add 1 so 0 isn't included and 6 is
	return (uint8_t) ((temp % 6) + 1 );
 80002ba:	230c      	movs	r3, #12
 80002bc:	18fb      	adds	r3, r7, r3
 80002be:	881b      	ldrh	r3, [r3, #0]
 80002c0:	2106      	movs	r1, #6
 80002c2:	0018      	movs	r0, r3
 80002c4:	f7ff ffa6 	bl	8000214 <__aeabi_uidivmod>
 80002c8:	000b      	movs	r3, r1
 80002ca:	b29b      	uxth	r3, r3
 80002cc:	b2db      	uxtb	r3, r3
 80002ce:	3301      	adds	r3, #1
 80002d0:	b2db      	uxtb	r3, r3
}
 80002d2:	0018      	movs	r0, r3
 80002d4:	46bd      	mov	sp, r7
 80002d6:	b004      	add	sp, #16
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	46c0      	nop			; (mov r8, r8)
 80002dc:	000030cb 	.word	0x000030cb

080002e0 <showNumber>:
 *
 * @params			uint8_t _n: number to show
 *
 * @returns			None
 */
void showNumber(uint8_t _n) {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	0002      	movs	r2, r0
 80002e8:	1dfb      	adds	r3, r7, #7
 80002ea:	701a      	strb	r2, [r3, #0]

	// Turn all LEDs off
	HAL_GPIO_WritePin(LED_1_7_GPIO_Port, LED_1_7_Pin, RESET);
 80002ec:	4b40      	ldr	r3, [pc, #256]	; (80003f0 <showNumber+0x110>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	2180      	movs	r1, #128	; 0x80
 80002f2:	0018      	movs	r0, r3
 80002f4:	f001 fc1a 	bl	8001b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_6_GPIO_Port, LED_2_6_Pin, RESET);
 80002f8:	2380      	movs	r3, #128	; 0x80
 80002fa:	0159      	lsls	r1, r3, #5
 80002fc:	23a0      	movs	r3, #160	; 0xa0
 80002fe:	05db      	lsls	r3, r3, #23
 8000300:	2200      	movs	r2, #0
 8000302:	0018      	movs	r0, r3
 8000304:	f001 fc12 	bl	8001b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_5_GPIO_Port, LED_3_5_Pin, RESET);
 8000308:	4b3a      	ldr	r3, [pc, #232]	; (80003f4 <showNumber+0x114>)
 800030a:	2200      	movs	r2, #0
 800030c:	2104      	movs	r1, #4
 800030e:	0018      	movs	r0, r3
 8000310:	f001 fc0c 	bl	8001b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, RESET);
 8000314:	2380      	movs	r3, #128	; 0x80
 8000316:	0059      	lsls	r1, r3, #1
 8000318:	23a0      	movs	r3, #160	; 0xa0
 800031a:	05db      	lsls	r3, r3, #23
 800031c:	2200      	movs	r2, #0
 800031e:	0018      	movs	r0, r3
 8000320:	f001 fc04 	bl	8001b2c <HAL_GPIO_WritePin>

	// Turn on the according combination of LEDs
	switch (_n) {
 8000324:	1dfb      	adds	r3, r7, #7
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	2b06      	cmp	r3, #6
 800032a:	d85a      	bhi.n	80003e2 <showNumber+0x102>
 800032c:	009a      	lsls	r2, r3, #2
 800032e:	4b32      	ldr	r3, [pc, #200]	; (80003f8 <showNumber+0x118>)
 8000330:	18d3      	adds	r3, r2, r3
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	469f      	mov	pc, r3
	case 0:
		break;
	case 1:
		HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, SET);
 8000336:	2380      	movs	r3, #128	; 0x80
 8000338:	0059      	lsls	r1, r3, #1
 800033a:	23a0      	movs	r3, #160	; 0xa0
 800033c:	05db      	lsls	r3, r3, #23
 800033e:	2201      	movs	r2, #1
 8000340:	0018      	movs	r0, r3
 8000342:	f001 fbf3 	bl	8001b2c <HAL_GPIO_WritePin>
		break;
 8000346:	e04f      	b.n	80003e8 <showNumber+0x108>
	case 2:
		HAL_GPIO_WritePin(LED_1_7_GPIO_Port, LED_1_7_Pin, SET);
 8000348:	4b29      	ldr	r3, [pc, #164]	; (80003f0 <showNumber+0x110>)
 800034a:	2201      	movs	r2, #1
 800034c:	2180      	movs	r1, #128	; 0x80
 800034e:	0018      	movs	r0, r3
 8000350:	f001 fbec 	bl	8001b2c <HAL_GPIO_WritePin>
		break;
 8000354:	e048      	b.n	80003e8 <showNumber+0x108>
	case 3:
		HAL_GPIO_WritePin(LED_3_5_GPIO_Port, LED_3_5_Pin, SET);
 8000356:	4b27      	ldr	r3, [pc, #156]	; (80003f4 <showNumber+0x114>)
 8000358:	2201      	movs	r2, #1
 800035a:	2104      	movs	r1, #4
 800035c:	0018      	movs	r0, r3
 800035e:	f001 fbe5 	bl	8001b2c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, SET);
 8000362:	2380      	movs	r3, #128	; 0x80
 8000364:	0059      	lsls	r1, r3, #1
 8000366:	23a0      	movs	r3, #160	; 0xa0
 8000368:	05db      	lsls	r3, r3, #23
 800036a:	2201      	movs	r2, #1
 800036c:	0018      	movs	r0, r3
 800036e:	f001 fbdd 	bl	8001b2c <HAL_GPIO_WritePin>
		break;
 8000372:	e039      	b.n	80003e8 <showNumber+0x108>
	case 4:
		HAL_GPIO_WritePin(LED_1_7_GPIO_Port, LED_1_7_Pin, SET);
 8000374:	4b1e      	ldr	r3, [pc, #120]	; (80003f0 <showNumber+0x110>)
 8000376:	2201      	movs	r2, #1
 8000378:	2180      	movs	r1, #128	; 0x80
 800037a:	0018      	movs	r0, r3
 800037c:	f001 fbd6 	bl	8001b2c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_3_5_GPIO_Port, LED_3_5_Pin, SET);
 8000380:	4b1c      	ldr	r3, [pc, #112]	; (80003f4 <showNumber+0x114>)
 8000382:	2201      	movs	r2, #1
 8000384:	2104      	movs	r1, #4
 8000386:	0018      	movs	r0, r3
 8000388:	f001 fbd0 	bl	8001b2c <HAL_GPIO_WritePin>
		break;
 800038c:	e02c      	b.n	80003e8 <showNumber+0x108>
	case 5:
		HAL_GPIO_WritePin(LED_1_7_GPIO_Port, LED_1_7_Pin, SET);
 800038e:	4b18      	ldr	r3, [pc, #96]	; (80003f0 <showNumber+0x110>)
 8000390:	2201      	movs	r2, #1
 8000392:	2180      	movs	r1, #128	; 0x80
 8000394:	0018      	movs	r0, r3
 8000396:	f001 fbc9 	bl	8001b2c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_3_5_GPIO_Port, LED_3_5_Pin, SET);
 800039a:	4b16      	ldr	r3, [pc, #88]	; (80003f4 <showNumber+0x114>)
 800039c:	2201      	movs	r2, #1
 800039e:	2104      	movs	r1, #4
 80003a0:	0018      	movs	r0, r3
 80003a2:	f001 fbc3 	bl	8001b2c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, SET);
 80003a6:	2380      	movs	r3, #128	; 0x80
 80003a8:	0059      	lsls	r1, r3, #1
 80003aa:	23a0      	movs	r3, #160	; 0xa0
 80003ac:	05db      	lsls	r3, r3, #23
 80003ae:	2201      	movs	r2, #1
 80003b0:	0018      	movs	r0, r3
 80003b2:	f001 fbbb 	bl	8001b2c <HAL_GPIO_WritePin>
		break;
 80003b6:	e017      	b.n	80003e8 <showNumber+0x108>
	case 6:
		HAL_GPIO_WritePin(LED_1_7_GPIO_Port, LED_1_7_Pin, SET);
 80003b8:	4b0d      	ldr	r3, [pc, #52]	; (80003f0 <showNumber+0x110>)
 80003ba:	2201      	movs	r2, #1
 80003bc:	2180      	movs	r1, #128	; 0x80
 80003be:	0018      	movs	r0, r3
 80003c0:	f001 fbb4 	bl	8001b2c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_3_5_GPIO_Port, LED_3_5_Pin, SET);
 80003c4:	4b0b      	ldr	r3, [pc, #44]	; (80003f4 <showNumber+0x114>)
 80003c6:	2201      	movs	r2, #1
 80003c8:	2104      	movs	r1, #4
 80003ca:	0018      	movs	r0, r3
 80003cc:	f001 fbae 	bl	8001b2c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2_6_GPIO_Port, LED_2_6_Pin, SET);
 80003d0:	2380      	movs	r3, #128	; 0x80
 80003d2:	0159      	lsls	r1, r3, #5
 80003d4:	23a0      	movs	r3, #160	; 0xa0
 80003d6:	05db      	lsls	r3, r3, #23
 80003d8:	2201      	movs	r2, #1
 80003da:	0018      	movs	r0, r3
 80003dc:	f001 fba6 	bl	8001b2c <HAL_GPIO_WritePin>
		break;
 80003e0:	e002      	b.n	80003e8 <showNumber+0x108>
	default:
		break;
 80003e2:	46c0      	nop			; (mov r8, r8)
 80003e4:	e000      	b.n	80003e8 <showNumber+0x108>
		break;
 80003e6:	46c0      	nop			; (mov r8, r8)
	}
}
 80003e8:	46c0      	nop			; (mov r8, r8)
 80003ea:	46bd      	mov	sp, r7
 80003ec:	b002      	add	sp, #8
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	50000400 	.word	0x50000400
 80003f4:	50001400 	.word	0x50001400
 80003f8:	080024a8 	.word	0x080024a8

080003fc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80003fc:	b5b0      	push	{r4, r5, r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000402:	f000 fb07 	bl	8000a14 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000406:	f000 f891 	bl	800052c <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	// COMMENT THIS DELAY IN THE FINAL CODE (for debug purpose only)
	HAL_Delay(8000);
 800040a:	23fa      	movs	r3, #250	; 0xfa
 800040c:	015b      	lsls	r3, r3, #5
 800040e:	0018      	movs	r0, r3
 8000410:	f000 fb7c 	bl	8000b0c <HAL_Delay>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000414:	f000 f958 	bl	80006c8 <MX_GPIO_Init>
	MX_ADC1_Init();
 8000418:	f000 f8cc 	bl	80005b4 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	// Start measuring with ADC to get random values
	HAL_ADC_Start(&hadc1);
 800041c:	4b41      	ldr	r3, [pc, #260]	; (8000524 <main+0x128>)
 800041e:	0018      	movs	r0, r3
 8000420:	f000 fe8e 	bl	8001140 <HAL_ADC_Start>

	// Show random value on startup

	HAL_Delay(1);
 8000424:	2001      	movs	r0, #1
 8000426:	f000 fb71 	bl	8000b0c <HAL_Delay>
	uint8_t randomDiceRolledValue = getNewRandomValue(&hadc1);
 800042a:	1dfc      	adds	r4, r7, #7
 800042c:	4b3d      	ldr	r3, [pc, #244]	; (8000524 <main+0x128>)
 800042e:	0018      	movs	r0, r3
 8000430:	f7ff fef6 	bl	8000220 <getNewRandomValue>
 8000434:	0003      	movs	r3, r0
 8000436:	7023      	strb	r3, [r4, #0]
	showNumber(randomDiceRolledValue);
 8000438:	1dfb      	adds	r3, r7, #7
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	0018      	movs	r0, r3
 800043e:	f7ff ff4f 	bl	80002e0 <showNumber>

	// Remember it
	uint8_t lastRandomDiceRolledValue = randomDiceRolledValue;
 8000442:	230f      	movs	r3, #15
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	1dfa      	adds	r2, r7, #7
 8000448:	7812      	ldrb	r2, [r2, #0]
 800044a:	701a      	strb	r2, [r3, #0]
	/* USER CODE BEGIN WHILE */

	// Main loop
	while (1) {

		if (flag) {
 800044c:	4b36      	ldr	r3, [pc, #216]	; (8000528 <main+0x12c>)
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	b2db      	uxtb	r3, r3
 8000452:	2b00      	cmp	r3, #0
 8000454:	d0fa      	beq.n	800044c <main+0x50>
			uint8_t rollCounter = 0;
 8000456:	230e      	movs	r3, #14
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	2200      	movs	r2, #0
 800045c:	701a      	strb	r2, [r3, #0]
			int i = 0;
 800045e:	2300      	movs	r3, #0
 8000460:	60bb      	str	r3, [r7, #8]

			// Add a random value of rolls
			do {
				rollCounter += getNewRandomValue(&hadc1);
 8000462:	4b30      	ldr	r3, [pc, #192]	; (8000524 <main+0x128>)
 8000464:	0018      	movs	r0, r3
 8000466:	f7ff fedb 	bl	8000220 <getNewRandomValue>
 800046a:	0003      	movs	r3, r0
 800046c:	0019      	movs	r1, r3
 800046e:	220e      	movs	r2, #14
 8000470:	18bb      	adds	r3, r7, r2
 8000472:	18ba      	adds	r2, r7, r2
 8000474:	7812      	ldrb	r2, [r2, #0]
 8000476:	188a      	adds	r2, r1, r2
 8000478:	701a      	strb	r2, [r3, #0]
				i++;
 800047a:	68bb      	ldr	r3, [r7, #8]
 800047c:	3301      	adds	r3, #1
 800047e:	60bb      	str	r3, [r7, #8]
			} while (i < getNewRandomValue(&hadc1) && i < 3);
 8000480:	4b28      	ldr	r3, [pc, #160]	; (8000524 <main+0x128>)
 8000482:	0018      	movs	r0, r3
 8000484:	f7ff fecc 	bl	8000220 <getNewRandomValue>
 8000488:	0003      	movs	r3, r0
 800048a:	001a      	movs	r2, r3
 800048c:	68bb      	ldr	r3, [r7, #8]
 800048e:	4293      	cmp	r3, r2
 8000490:	da42      	bge.n	8000518 <main+0x11c>
 8000492:	68bb      	ldr	r3, [r7, #8]
 8000494:	2b02      	cmp	r3, #2
 8000496:	dde4      	ble.n	8000462 <main+0x66>

			while (rollCounter) {
 8000498:	e03e      	b.n	8000518 <main+0x11c>
				if (flag) {
 800049a:	4b23      	ldr	r3, [pc, #140]	; (8000528 <main+0x12c>)
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d015      	beq.n	80004d0 <main+0xd4>
					flag = 0;
 80004a4:	4b20      	ldr	r3, [pc, #128]	; (8000528 <main+0x12c>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	701a      	strb	r2, [r3, #0]

					// If still rolling, add new rolls but no more than 50
					rollCounter += getNewRandomValue(&hadc1);
 80004aa:	4b1e      	ldr	r3, [pc, #120]	; (8000524 <main+0x128>)
 80004ac:	0018      	movs	r0, r3
 80004ae:	f7ff feb7 	bl	8000220 <getNewRandomValue>
 80004b2:	0003      	movs	r3, r0
 80004b4:	0019      	movs	r1, r3
 80004b6:	200e      	movs	r0, #14
 80004b8:	183b      	adds	r3, r7, r0
 80004ba:	183a      	adds	r2, r7, r0
 80004bc:	7812      	ldrb	r2, [r2, #0]
 80004be:	188a      	adds	r2, r1, r2
 80004c0:	701a      	strb	r2, [r3, #0]
					if (rollCounter > 50)
 80004c2:	183b      	adds	r3, r7, r0
 80004c4:	781b      	ldrb	r3, [r3, #0]
 80004c6:	2b32      	cmp	r3, #50	; 0x32
 80004c8:	d902      	bls.n	80004d0 <main+0xd4>
						rollCounter = 50;
 80004ca:	183b      	adds	r3, r7, r0
 80004cc:	2232      	movs	r2, #50	; 0x32
 80004ce:	701a      	strb	r2, [r3, #0]
				}

				// Make sure the number that is being displayed is not the same as the last one
				// To simulate real dice
				do {
					randomDiceRolledValue = getNewRandomValue(&hadc1);
 80004d0:	1dfc      	adds	r4, r7, #7
 80004d2:	4b14      	ldr	r3, [pc, #80]	; (8000524 <main+0x128>)
 80004d4:	0018      	movs	r0, r3
 80004d6:	f7ff fea3 	bl	8000220 <getNewRandomValue>
 80004da:	0003      	movs	r3, r0
 80004dc:	7023      	strb	r3, [r4, #0]
 80004de:	240e      	movs	r4, #14
 80004e0:	193b      	adds	r3, r7, r4
 80004e2:	193a      	adds	r2, r7, r4
 80004e4:	7812      	ldrb	r2, [r2, #0]
 80004e6:	701a      	strb	r2, [r3, #0]
				} while (randomDiceRolledValue == lastRandomDiceRolledValue);
 80004e8:	1dfa      	adds	r2, r7, #7
 80004ea:	250f      	movs	r5, #15
 80004ec:	197b      	adds	r3, r7, r5
 80004ee:	7812      	ldrb	r2, [r2, #0]
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	429a      	cmp	r2, r3
 80004f4:	d0ec      	beq.n	80004d0 <main+0xd4>

				// Number is good, show the roll and remember it
				showNumber(randomDiceRolledValue);
 80004f6:	1dfb      	adds	r3, r7, #7
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	0018      	movs	r0, r3
 80004fc:	f7ff fef0 	bl	80002e0 <showNumber>
				lastRandomDiceRolledValue = randomDiceRolledValue;
 8000500:	197b      	adds	r3, r7, r5
 8000502:	1dfa      	adds	r2, r7, #7
 8000504:	7812      	ldrb	r2, [r2, #0]
 8000506:	701a      	strb	r2, [r3, #0]
				rollCounter--;
 8000508:	193b      	adds	r3, r7, r4
 800050a:	781a      	ldrb	r2, [r3, #0]
 800050c:	193b      	adds	r3, r7, r4
 800050e:	3a01      	subs	r2, #1
 8000510:	701a      	strb	r2, [r3, #0]

				// Wait the expected length of time
				HAL_Delay(55);
 8000512:	2037      	movs	r0, #55	; 0x37
 8000514:	f000 fafa 	bl	8000b0c <HAL_Delay>
			while (rollCounter) {
 8000518:	230e      	movs	r3, #14
 800051a:	18fb      	adds	r3, r7, r3
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d1bb      	bne.n	800049a <main+0x9e>
		if (flag) {
 8000522:	e793      	b.n	800044c <main+0x50>
 8000524:	20000028 	.word	0x20000028
 8000528:	2000008c 	.word	0x2000008c

0800052c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800052c:	b590      	push	{r4, r7, lr}
 800052e:	b08d      	sub	sp, #52	; 0x34
 8000530:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000532:	2414      	movs	r4, #20
 8000534:	193b      	adds	r3, r7, r4
 8000536:	0018      	movs	r0, r3
 8000538:	231c      	movs	r3, #28
 800053a:	001a      	movs	r2, r3
 800053c:	2100      	movs	r1, #0
 800053e:	f001 ff9f 	bl	8002480 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000542:	003b      	movs	r3, r7
 8000544:	0018      	movs	r0, r3
 8000546:	2314      	movs	r3, #20
 8000548:	001a      	movs	r2, r3
 800054a:	2100      	movs	r1, #0
 800054c:	f001 ff98 	bl	8002480 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000550:	193b      	adds	r3, r7, r4
 8000552:	2202      	movs	r2, #2
 8000554:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000556:	193b      	adds	r3, r7, r4
 8000558:	2280      	movs	r2, #128	; 0x80
 800055a:	0052      	lsls	r2, r2, #1
 800055c:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV32;
 800055e:	193b      	adds	r3, r7, r4
 8000560:	22a0      	movs	r2, #160	; 0xa0
 8000562:	0192      	lsls	r2, r2, #6
 8000564:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000566:	193b      	adds	r3, r7, r4
 8000568:	2240      	movs	r2, #64	; 0x40
 800056a:	615a      	str	r2, [r3, #20]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800056c:	193b      	adds	r3, r7, r4
 800056e:	0018      	movs	r0, r3
 8000570:	f001 fb2e 	bl	8001bd0 <HAL_RCC_OscConfig>
 8000574:	1e03      	subs	r3, r0, #0
 8000576:	d001      	beq.n	800057c <SystemClock_Config+0x50>
		Error_Handler();
 8000578:	f000 f95c 	bl	8000834 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800057c:	003b      	movs	r3, r7
 800057e:	2207      	movs	r2, #7
 8000580:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000582:	003b      	movs	r3, r7
 8000584:	2200      	movs	r2, #0
 8000586:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000588:	003b      	movs	r3, r7
 800058a:	2200      	movs	r2, #0
 800058c:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800058e:	003b      	movs	r3, r7
 8000590:	2200      	movs	r2, #0
 8000592:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000594:	003b      	movs	r3, r7
 8000596:	2200      	movs	r2, #0
 8000598:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800059a:	003b      	movs	r3, r7
 800059c:	2100      	movs	r1, #0
 800059e:	0018      	movs	r0, r3
 80005a0:	f001 fd10 	bl	8001fc4 <HAL_RCC_ClockConfig>
 80005a4:	1e03      	subs	r3, r0, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x80>
		Error_Handler();
 80005a8:	f000 f944 	bl	8000834 <Error_Handler>
	}
}
 80005ac:	46c0      	nop			; (mov r8, r8)
 80005ae:	46bd      	mov	sp, r7
 80005b0:	b00d      	add	sp, #52	; 0x34
 80005b2:	bd90      	pop	{r4, r7, pc}

080005b4 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08a      	sub	sp, #40	; 0x28
 80005b8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80005ba:	231c      	movs	r3, #28
 80005bc:	18fb      	adds	r3, r7, r3
 80005be:	0018      	movs	r0, r3
 80005c0:	230c      	movs	r3, #12
 80005c2:	001a      	movs	r2, r3
 80005c4:	2100      	movs	r1, #0
 80005c6:	f001 ff5b 	bl	8002480 <memset>

	/* USER CODE BEGIN ADC1_Init 1 */
	GPIO_InitTypeDef gpioInit;
	__GPIOA_CLK_ENABLE()
 80005ca:	4b3b      	ldr	r3, [pc, #236]	; (80006b8 <MX_ADC1_Init+0x104>)
 80005cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005ce:	4b3a      	ldr	r3, [pc, #232]	; (80006b8 <MX_ADC1_Init+0x104>)
 80005d0:	2101      	movs	r1, #1
 80005d2:	430a      	orrs	r2, r1
 80005d4:	635a      	str	r2, [r3, #52]	; 0x34
 80005d6:	4b38      	ldr	r3, [pc, #224]	; (80006b8 <MX_ADC1_Init+0x104>)
 80005d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005da:	2201      	movs	r2, #1
 80005dc:	4013      	ands	r3, r2
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]
	;
	gpioInit.Pin = RNG_Pin;
 80005e2:	2108      	movs	r1, #8
 80005e4:	187b      	adds	r3, r7, r1
 80005e6:	2280      	movs	r2, #128	; 0x80
 80005e8:	01d2      	lsls	r2, r2, #7
 80005ea:	601a      	str	r2, [r3, #0]
	gpioInit.Mode = GPIO_MODE_ANALOG;
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	2203      	movs	r2, #3
 80005f0:	605a      	str	r2, [r3, #4]
	gpioInit.Pull = GPIO_NOPULL;
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	2200      	movs	r2, #0
 80005f6:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(RNG_GPIO_Port, &gpioInit);
 80005f8:	187a      	adds	r2, r7, r1
 80005fa:	23a0      	movs	r3, #160	; 0xa0
 80005fc:	05db      	lsls	r3, r3, #23
 80005fe:	0011      	movs	r1, r2
 8000600:	0018      	movs	r0, r3
 8000602:	f001 f929 	bl	8001858 <HAL_GPIO_Init>
	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000606:	4b2d      	ldr	r3, [pc, #180]	; (80006bc <MX_ADC1_Init+0x108>)
 8000608:	4a2d      	ldr	r2, [pc, #180]	; (80006c0 <MX_ADC1_Init+0x10c>)
 800060a:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800060c:	4b2b      	ldr	r3, [pc, #172]	; (80006bc <MX_ADC1_Init+0x108>)
 800060e:	2200      	movs	r2, #0
 8000610:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000612:	4b2a      	ldr	r3, [pc, #168]	; (80006bc <MX_ADC1_Init+0x108>)
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000618:	4b28      	ldr	r3, [pc, #160]	; (80006bc <MX_ADC1_Init+0x108>)
 800061a:	2200      	movs	r2, #0
 800061c:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800061e:	4b27      	ldr	r3, [pc, #156]	; (80006bc <MX_ADC1_Init+0x108>)
 8000620:	2200      	movs	r2, #0
 8000622:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000624:	4b25      	ldr	r3, [pc, #148]	; (80006bc <MX_ADC1_Init+0x108>)
 8000626:	2204      	movs	r2, #4
 8000628:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 800062a:	4b24      	ldr	r3, [pc, #144]	; (80006bc <MX_ADC1_Init+0x108>)
 800062c:	2200      	movs	r2, #0
 800062e:	761a      	strb	r2, [r3, #24]
	hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000630:	4b22      	ldr	r3, [pc, #136]	; (80006bc <MX_ADC1_Init+0x108>)
 8000632:	2200      	movs	r2, #0
 8000634:	765a      	strb	r2, [r3, #25]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000636:	4b21      	ldr	r3, [pc, #132]	; (80006bc <MX_ADC1_Init+0x108>)
 8000638:	2201      	movs	r2, #1
 800063a:	769a      	strb	r2, [r3, #26]
	hadc1.Init.NbrOfConversion = 1;
 800063c:	4b1f      	ldr	r3, [pc, #124]	; (80006bc <MX_ADC1_Init+0x108>)
 800063e:	2201      	movs	r2, #1
 8000640:	61da      	str	r2, [r3, #28]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000642:	4b1e      	ldr	r3, [pc, #120]	; (80006bc <MX_ADC1_Init+0x108>)
 8000644:	2200      	movs	r2, #0
 8000646:	625a      	str	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000648:	4b1c      	ldr	r3, [pc, #112]	; (80006bc <MX_ADC1_Init+0x108>)
 800064a:	2200      	movs	r2, #0
 800064c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800064e:	4b1b      	ldr	r3, [pc, #108]	; (80006bc <MX_ADC1_Init+0x108>)
 8000650:	222c      	movs	r2, #44	; 0x2c
 8000652:	2100      	movs	r1, #0
 8000654:	5499      	strb	r1, [r3, r2]
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000656:	4b19      	ldr	r3, [pc, #100]	; (80006bc <MX_ADC1_Init+0x108>)
 8000658:	2200      	movs	r2, #0
 800065a:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800065c:	4b17      	ldr	r3, [pc, #92]	; (80006bc <MX_ADC1_Init+0x108>)
 800065e:	2200      	movs	r2, #0
 8000660:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000662:	4b16      	ldr	r3, [pc, #88]	; (80006bc <MX_ADC1_Init+0x108>)
 8000664:	2200      	movs	r2, #0
 8000666:	639a      	str	r2, [r3, #56]	; 0x38
	hadc1.Init.OversamplingMode = DISABLE;
 8000668:	4b14      	ldr	r3, [pc, #80]	; (80006bc <MX_ADC1_Init+0x108>)
 800066a:	223c      	movs	r2, #60	; 0x3c
 800066c:	2100      	movs	r1, #0
 800066e:	5499      	strb	r1, [r3, r2]
	hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000670:	4b12      	ldr	r3, [pc, #72]	; (80006bc <MX_ADC1_Init+0x108>)
 8000672:	2200      	movs	r2, #0
 8000674:	64da      	str	r2, [r3, #76]	; 0x4c
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000676:	4b11      	ldr	r3, [pc, #68]	; (80006bc <MX_ADC1_Init+0x108>)
 8000678:	0018      	movs	r0, r3
 800067a:	f000 fb99 	bl	8000db0 <HAL_ADC_Init>
 800067e:	1e03      	subs	r3, r0, #0
 8000680:	d001      	beq.n	8000686 <MX_ADC1_Init+0xd2>
		Error_Handler();
 8000682:	f000 f8d7 	bl	8000834 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_14;
 8000686:	211c      	movs	r1, #28
 8000688:	187b      	adds	r3, r7, r1
 800068a:	4a0e      	ldr	r2, [pc, #56]	; (80006c4 <MX_ADC1_Init+0x110>)
 800068c:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800068e:	187b      	adds	r3, r7, r1
 8000690:	2200      	movs	r2, #0
 8000692:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000694:	187b      	adds	r3, r7, r1
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800069a:	187a      	adds	r2, r7, r1
 800069c:	4b07      	ldr	r3, [pc, #28]	; (80006bc <MX_ADC1_Init+0x108>)
 800069e:	0011      	movs	r1, r2
 80006a0:	0018      	movs	r0, r3
 80006a2:	f000 fda7 	bl	80011f4 <HAL_ADC_ConfigChannel>
 80006a6:	1e03      	subs	r3, r0, #0
 80006a8:	d001      	beq.n	80006ae <MX_ADC1_Init+0xfa>
		Error_Handler();
 80006aa:	f000 f8c3 	bl	8000834 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80006ae:	46c0      	nop			; (mov r8, r8)
 80006b0:	46bd      	mov	sp, r7
 80006b2:	b00a      	add	sp, #40	; 0x28
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	40021000 	.word	0x40021000
 80006bc:	20000028 	.word	0x20000028
 80006c0:	40012400 	.word	0x40012400
 80006c4:	38004000 	.word	0x38004000

080006c8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80006c8:	b590      	push	{r4, r7, lr}
 80006ca:	b089      	sub	sp, #36	; 0x24
 80006cc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80006ce:	240c      	movs	r4, #12
 80006d0:	193b      	adds	r3, r7, r4
 80006d2:	0018      	movs	r0, r3
 80006d4:	2314      	movs	r3, #20
 80006d6:	001a      	movs	r2, r3
 80006d8:	2100      	movs	r1, #0
 80006da:	f001 fed1 	bl	8002480 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80006de:	4b49      	ldr	r3, [pc, #292]	; (8000804 <MX_GPIO_Init+0x13c>)
 80006e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006e2:	4b48      	ldr	r3, [pc, #288]	; (8000804 <MX_GPIO_Init+0x13c>)
 80006e4:	2102      	movs	r1, #2
 80006e6:	430a      	orrs	r2, r1
 80006e8:	635a      	str	r2, [r3, #52]	; 0x34
 80006ea:	4b46      	ldr	r3, [pc, #280]	; (8000804 <MX_GPIO_Init+0x13c>)
 80006ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006ee:	2202      	movs	r2, #2
 80006f0:	4013      	ands	r3, r2
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80006f6:	4b43      	ldr	r3, [pc, #268]	; (8000804 <MX_GPIO_Init+0x13c>)
 80006f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006fa:	4b42      	ldr	r3, [pc, #264]	; (8000804 <MX_GPIO_Init+0x13c>)
 80006fc:	2120      	movs	r1, #32
 80006fe:	430a      	orrs	r2, r1
 8000700:	635a      	str	r2, [r3, #52]	; 0x34
 8000702:	4b40      	ldr	r3, [pc, #256]	; (8000804 <MX_GPIO_Init+0x13c>)
 8000704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000706:	2220      	movs	r2, #32
 8000708:	4013      	ands	r3, r2
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	4b3d      	ldr	r3, [pc, #244]	; (8000804 <MX_GPIO_Init+0x13c>)
 8000710:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000712:	4b3c      	ldr	r3, [pc, #240]	; (8000804 <MX_GPIO_Init+0x13c>)
 8000714:	2101      	movs	r1, #1
 8000716:	430a      	orrs	r2, r1
 8000718:	635a      	str	r2, [r3, #52]	; 0x34
 800071a:	4b3a      	ldr	r3, [pc, #232]	; (8000804 <MX_GPIO_Init+0x13c>)
 800071c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800071e:	2201      	movs	r2, #1
 8000720:	4013      	ands	r3, r2
 8000722:	603b      	str	r3, [r7, #0]
 8000724:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_1_7_GPIO_Port, LED_1_7_Pin, GPIO_PIN_RESET);
 8000726:	4b38      	ldr	r3, [pc, #224]	; (8000808 <MX_GPIO_Init+0x140>)
 8000728:	2200      	movs	r2, #0
 800072a:	2180      	movs	r1, #128	; 0x80
 800072c:	0018      	movs	r0, r3
 800072e:	f001 f9fd 	bl	8001b2c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_3_5_GPIO_Port, LED_3_5_Pin, GPIO_PIN_RESET);
 8000732:	4b36      	ldr	r3, [pc, #216]	; (800080c <MX_GPIO_Init+0x144>)
 8000734:	2200      	movs	r2, #0
 8000736:	2104      	movs	r1, #4
 8000738:	0018      	movs	r0, r3
 800073a:	f001 f9f7 	bl	8001b2c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LED_4_Pin | LED_2_6_Pin, GPIO_PIN_RESET);
 800073e:	2388      	movs	r3, #136	; 0x88
 8000740:	0159      	lsls	r1, r3, #5
 8000742:	23a0      	movs	r3, #160	; 0xa0
 8000744:	05db      	lsls	r3, r3, #23
 8000746:	2200      	movs	r2, #0
 8000748:	0018      	movs	r0, r3
 800074a:	f001 f9ef 	bl	8001b2c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_1_7_Pin */
	GPIO_InitStruct.Pin = LED_1_7_Pin;
 800074e:	193b      	adds	r3, r7, r4
 8000750:	2280      	movs	r2, #128	; 0x80
 8000752:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000754:	193b      	adds	r3, r7, r4
 8000756:	2201      	movs	r2, #1
 8000758:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	193b      	adds	r3, r7, r4
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000760:	193b      	adds	r3, r7, r4
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LED_1_7_GPIO_Port, &GPIO_InitStruct);
 8000766:	193b      	adds	r3, r7, r4
 8000768:	4a27      	ldr	r2, [pc, #156]	; (8000808 <MX_GPIO_Init+0x140>)
 800076a:	0019      	movs	r1, r3
 800076c:	0010      	movs	r0, r2
 800076e:	f001 f873 	bl	8001858 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_3_5_Pin */
	GPIO_InitStruct.Pin = LED_3_5_Pin;
 8000772:	193b      	adds	r3, r7, r4
 8000774:	2204      	movs	r2, #4
 8000776:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000778:	193b      	adds	r3, r7, r4
 800077a:	2201      	movs	r2, #1
 800077c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	193b      	adds	r3, r7, r4
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000784:	193b      	adds	r3, r7, r4
 8000786:	2200      	movs	r2, #0
 8000788:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LED_3_5_GPIO_Port, &GPIO_InitStruct);
 800078a:	193b      	adds	r3, r7, r4
 800078c:	4a1f      	ldr	r2, [pc, #124]	; (800080c <MX_GPIO_Init+0x144>)
 800078e:	0019      	movs	r1, r3
 8000790:	0010      	movs	r0, r2
 8000792:	f001 f861 	bl	8001858 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED_4_Pin LED_2_6_Pin */
	GPIO_InitStruct.Pin = LED_4_Pin | LED_2_6_Pin;
 8000796:	0021      	movs	r1, r4
 8000798:	187b      	adds	r3, r7, r1
 800079a:	2288      	movs	r2, #136	; 0x88
 800079c:	0152      	lsls	r2, r2, #5
 800079e:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a0:	000c      	movs	r4, r1
 80007a2:	193b      	adds	r3, r7, r4
 80007a4:	2201      	movs	r2, #1
 80007a6:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	193b      	adds	r3, r7, r4
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ae:	193b      	adds	r3, r7, r4
 80007b0:	2200      	movs	r2, #0
 80007b2:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b4:	193a      	adds	r2, r7, r4
 80007b6:	23a0      	movs	r3, #160	; 0xa0
 80007b8:	05db      	lsls	r3, r3, #23
 80007ba:	0011      	movs	r1, r2
 80007bc:	0018      	movs	r0, r3
 80007be:	f001 f84b 	bl	8001858 <HAL_GPIO_Init>

	/*Configure GPIO pin : SWITCH_Pin */
	GPIO_InitStruct.Pin = SWITCH_Pin;
 80007c2:	0021      	movs	r1, r4
 80007c4:	187b      	adds	r3, r7, r1
 80007c6:	2280      	movs	r2, #128	; 0x80
 80007c8:	0192      	lsls	r2, r2, #6
 80007ca:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007cc:	187b      	adds	r3, r7, r1
 80007ce:	4a10      	ldr	r2, [pc, #64]	; (8000810 <MX_GPIO_Init+0x148>)
 80007d0:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007d2:	187b      	adds	r3, r7, r1
 80007d4:	2202      	movs	r2, #2
 80007d6:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(SWITCH_GPIO_Port, &GPIO_InitStruct);
 80007d8:	187a      	adds	r2, r7, r1
 80007da:	23a0      	movs	r3, #160	; 0xa0
 80007dc:	05db      	lsls	r3, r3, #23
 80007de:	0011      	movs	r1, r2
 80007e0:	0018      	movs	r0, r3
 80007e2:	f001 f839 	bl	8001858 <HAL_GPIO_Init>

	/**/
	HAL_SYSCFG_SetPinBinding(
 80007e6:	2000      	movs	r0, #0
 80007e8:	f000 f9b2 	bl	8000b50 <HAL_SYSCFG_SetPinBinding>
	HAL_BIND_SO8_PIN1_PB7 | HAL_BIND_SO8_PIN4_PF2 | HAL_BIND_SO8_PIN5_PA8);

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2100      	movs	r1, #0
 80007f0:	2007      	movs	r0, #7
 80007f2:	f000 ffff 	bl	80017f4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80007f6:	2007      	movs	r0, #7
 80007f8:	f001 f811 	bl	800181e <HAL_NVIC_EnableIRQ>

}
 80007fc:	46c0      	nop			; (mov r8, r8)
 80007fe:	46bd      	mov	sp, r7
 8000800:	b009      	add	sp, #36	; 0x24
 8000802:	bd90      	pop	{r4, r7, pc}
 8000804:	40021000 	.word	0x40021000
 8000808:	50000400 	.word	0x50000400
 800080c:	50001400 	.word	0x50001400
 8000810:	10110000 	.word	0x10110000

08000814 <HAL_GPIO_EXTI_Rising_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	0002      	movs	r2, r0
 800081c:	1dbb      	adds	r3, r7, #6
 800081e:	801a      	strh	r2, [r3, #0]
	flag = 1;
 8000820:	4b03      	ldr	r3, [pc, #12]	; (8000830 <HAL_GPIO_EXTI_Rising_Callback+0x1c>)
 8000822:	2201      	movs	r2, #1
 8000824:	701a      	strb	r2, [r3, #0]
}
 8000826:	46c0      	nop			; (mov r8, r8)
 8000828:	46bd      	mov	sp, r7
 800082a:	b002      	add	sp, #8
 800082c:	bd80      	pop	{r7, pc}
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	2000008c 	.word	0x2000008c

08000834 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000838:	b672      	cpsid	i
}
 800083a:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800083c:	e7fe      	b.n	800083c <Error_Handler+0x8>
	...

08000840 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000846:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <HAL_MspInit+0x44>)
 8000848:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <HAL_MspInit+0x44>)
 800084c:	2101      	movs	r1, #1
 800084e:	430a      	orrs	r2, r1
 8000850:	641a      	str	r2, [r3, #64]	; 0x40
 8000852:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <HAL_MspInit+0x44>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000856:	2201      	movs	r2, #1
 8000858:	4013      	ands	r3, r2
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085e:	4b09      	ldr	r3, [pc, #36]	; (8000884 <HAL_MspInit+0x44>)
 8000860:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000862:	4b08      	ldr	r3, [pc, #32]	; (8000884 <HAL_MspInit+0x44>)
 8000864:	2180      	movs	r1, #128	; 0x80
 8000866:	0549      	lsls	r1, r1, #21
 8000868:	430a      	orrs	r2, r1
 800086a:	63da      	str	r2, [r3, #60]	; 0x3c
 800086c:	4b05      	ldr	r3, [pc, #20]	; (8000884 <HAL_MspInit+0x44>)
 800086e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000870:	2380      	movs	r3, #128	; 0x80
 8000872:	055b      	lsls	r3, r3, #21
 8000874:	4013      	ands	r3, r2
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087a:	46c0      	nop			; (mov r8, r8)
 800087c:	46bd      	mov	sp, r7
 800087e:	b002      	add	sp, #8
 8000880:	bd80      	pop	{r7, pc}
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	40021000 	.word	0x40021000

08000888 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000888:	b590      	push	{r4, r7, lr}
 800088a:	b091      	sub	sp, #68	; 0x44
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000890:	232c      	movs	r3, #44	; 0x2c
 8000892:	18fb      	adds	r3, r7, r3
 8000894:	0018      	movs	r0, r3
 8000896:	2314      	movs	r3, #20
 8000898:	001a      	movs	r2, r3
 800089a:	2100      	movs	r1, #0
 800089c:	f001 fdf0 	bl	8002480 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008a0:	2410      	movs	r4, #16
 80008a2:	193b      	adds	r3, r7, r4
 80008a4:	0018      	movs	r0, r3
 80008a6:	231c      	movs	r3, #28
 80008a8:	001a      	movs	r2, r3
 80008aa:	2100      	movs	r1, #0
 80008ac:	f001 fde8 	bl	8002480 <memset>
  if(hadc->Instance==ADC1)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a22      	ldr	r2, [pc, #136]	; (8000940 <HAL_ADC_MspInit+0xb8>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d13d      	bne.n	8000936 <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008ba:	193b      	adds	r3, r7, r4
 80008bc:	2280      	movs	r2, #128	; 0x80
 80008be:	01d2      	lsls	r2, r2, #7
 80008c0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80008c2:	193b      	adds	r3, r7, r4
 80008c4:	2200      	movs	r2, #0
 80008c6:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008c8:	193b      	adds	r3, r7, r4
 80008ca:	0018      	movs	r0, r3
 80008cc:	f001 fcc6 	bl	800225c <HAL_RCCEx_PeriphCLKConfig>
 80008d0:	1e03      	subs	r3, r0, #0
 80008d2:	d001      	beq.n	80008d8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80008d4:	f7ff ffae 	bl	8000834 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80008d8:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <HAL_ADC_MspInit+0xbc>)
 80008da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008dc:	4b19      	ldr	r3, [pc, #100]	; (8000944 <HAL_ADC_MspInit+0xbc>)
 80008de:	2180      	movs	r1, #128	; 0x80
 80008e0:	0349      	lsls	r1, r1, #13
 80008e2:	430a      	orrs	r2, r1
 80008e4:	641a      	str	r2, [r3, #64]	; 0x40
 80008e6:	4b17      	ldr	r3, [pc, #92]	; (8000944 <HAL_ADC_MspInit+0xbc>)
 80008e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008ea:	2380      	movs	r3, #128	; 0x80
 80008ec:	035b      	lsls	r3, r3, #13
 80008ee:	4013      	ands	r3, r2
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f4:	4b13      	ldr	r3, [pc, #76]	; (8000944 <HAL_ADC_MspInit+0xbc>)
 80008f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008f8:	4b12      	ldr	r3, [pc, #72]	; (8000944 <HAL_ADC_MspInit+0xbc>)
 80008fa:	2101      	movs	r1, #1
 80008fc:	430a      	orrs	r2, r1
 80008fe:	635a      	str	r2, [r3, #52]	; 0x34
 8000900:	4b10      	ldr	r3, [pc, #64]	; (8000944 <HAL_ADC_MspInit+0xbc>)
 8000902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000904:	2201      	movs	r2, #1
 8000906:	4013      	ands	r3, r2
 8000908:	60bb      	str	r3, [r7, #8]
 800090a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA14-BOOT0     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = RNG_Pin;
 800090c:	212c      	movs	r1, #44	; 0x2c
 800090e:	187b      	adds	r3, r7, r1
 8000910:	2280      	movs	r2, #128	; 0x80
 8000912:	01d2      	lsls	r2, r2, #7
 8000914:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000916:	187b      	adds	r3, r7, r1
 8000918:	2203      	movs	r2, #3
 800091a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	187b      	adds	r3, r7, r1
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(RNG_GPIO_Port, &GPIO_InitStruct);
 8000922:	187a      	adds	r2, r7, r1
 8000924:	23a0      	movs	r3, #160	; 0xa0
 8000926:	05db      	lsls	r3, r3, #23
 8000928:	0011      	movs	r1, r2
 800092a:	0018      	movs	r0, r3
 800092c:	f000 ff94 	bl	8001858 <HAL_GPIO_Init>

    HAL_SYSCFG_SetPinBinding(HAL_BIND_SO8_PIN8_PA14);
 8000930:	2000      	movs	r0, #0
 8000932:	f000 f90d 	bl	8000b50 <HAL_SYSCFG_SetPinBinding>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	46bd      	mov	sp, r7
 800093a:	b011      	add	sp, #68	; 0x44
 800093c:	bd90      	pop	{r4, r7, pc}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	40012400 	.word	0x40012400
 8000944:	40021000 	.word	0x40021000

08000948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800094c:	e7fe      	b.n	800094c <NMI_Handler+0x4>

0800094e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000952:	e7fe      	b.n	8000952 <HardFault_Handler+0x4>

08000954 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000958:	46c0      	nop			; (mov r8, r8)
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800096c:	f000 f8b4 	bl	8000ad8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000970:	46c0      	nop			; (mov r8, r8)
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}

08000976 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000976:	b580      	push	{r7, lr}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SWITCH_Pin);
 800097a:	2380      	movs	r3, #128	; 0x80
 800097c:	019b      	lsls	r3, r3, #6
 800097e:	0018      	movs	r0, r3
 8000980:	f001 f8f2 	bl	8001b68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000984:	46c0      	nop			; (mov r8, r8)
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
	...

0800098c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000990:	4b03      	ldr	r3, [pc, #12]	; (80009a0 <SystemInit+0x14>)
 8000992:	2280      	movs	r2, #128	; 0x80
 8000994:	0512      	lsls	r2, r2, #20
 8000996:	609a      	str	r2, [r3, #8]
#endif
}
 8000998:	46c0      	nop			; (mov r8, r8)
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009a4:	480d      	ldr	r0, [pc, #52]	; (80009dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009a6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80009a8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80009aa:	e003      	b.n	80009b4 <LoopCopyDataInit>

080009ac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80009ae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80009b0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80009b2:	3104      	adds	r1, #4

080009b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80009b4:	480b      	ldr	r0, [pc, #44]	; (80009e4 <LoopForever+0xa>)
  ldr r3, =_edata
 80009b6:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <LoopForever+0xe>)
  adds r2, r0, r1
 80009b8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80009ba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80009bc:	d3f6      	bcc.n	80009ac <CopyDataInit>
  ldr r2, =_sbss
 80009be:	4a0b      	ldr	r2, [pc, #44]	; (80009ec <LoopForever+0x12>)
  b LoopFillZerobss
 80009c0:	e002      	b.n	80009c8 <LoopFillZerobss>

080009c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80009c2:	2300      	movs	r3, #0
  str  r3, [r2]
 80009c4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c6:	3204      	adds	r2, #4

080009c8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80009c8:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <LoopForever+0x16>)
  cmp r2, r3
 80009ca:	429a      	cmp	r2, r3
  bcc FillZerobss
 80009cc:	d3f9      	bcc.n	80009c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80009ce:	f7ff ffdd 	bl	800098c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80009d2:	f001 fd31 	bl	8002438 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009d6:	f7ff fd11 	bl	80003fc <main>

080009da <LoopForever>:

LoopForever:
    b LoopForever
 80009da:	e7fe      	b.n	80009da <LoopForever>
  ldr   r0, =_estack
 80009dc:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 80009e0:	0800250c 	.word	0x0800250c
  ldr r0, =_sdata
 80009e4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80009e8:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80009ec:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80009f0:	20000094 	.word	0x20000094

080009f4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009f4:	e7fe      	b.n	80009f4 <ADC1_IRQHandler>
	...

080009f8 <LL_SYSCFG_ConfigPinMux>:
  * @rmtoll SYSCFG_CFGR3 CLL   LL_SYSCFG_ConfigPinMux\n
  * @param  mux_cfg This parameter can be a combination of LL_PINMUX_xx defines
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_ConfigPinMux(uint32_t mux_cfg)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  WRITE_REG(SYSCFG->CFGR3, mux_cfg);
 8000a00:	4b03      	ldr	r3, [pc, #12]	; (8000a10 <LL_SYSCFG_ConfigPinMux+0x18>)
 8000a02:	687a      	ldr	r2, [r7, #4]
 8000a04:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	b002      	add	sp, #8
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	40010000 	.word	0x40010000

08000a14 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a1a:	1dfb      	adds	r3, r7, #7
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a20:	2003      	movs	r0, #3
 8000a22:	f000 f80f 	bl	8000a44 <HAL_InitTick>
 8000a26:	1e03      	subs	r3, r0, #0
 8000a28:	d003      	beq.n	8000a32 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000a2a:	1dfb      	adds	r3, r7, #7
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	701a      	strb	r2, [r3, #0]
 8000a30:	e001      	b.n	8000a36 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a32:	f7ff ff05 	bl	8000840 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a36:	1dfb      	adds	r3, r7, #7
 8000a38:	781b      	ldrb	r3, [r3, #0]
}
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	b002      	add	sp, #8
 8000a40:	bd80      	pop	{r7, pc}
	...

08000a44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a44:	b590      	push	{r4, r7, lr}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a4c:	230f      	movs	r3, #15
 8000a4e:	18fb      	adds	r3, r7, r3
 8000a50:	2200      	movs	r2, #0
 8000a52:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8000a54:	4b1d      	ldr	r3, [pc, #116]	; (8000acc <HAL_InitTick+0x88>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d02b      	beq.n	8000ab4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a5c:	4b1c      	ldr	r3, [pc, #112]	; (8000ad0 <HAL_InitTick+0x8c>)
 8000a5e:	681c      	ldr	r4, [r3, #0]
 8000a60:	4b1a      	ldr	r3, [pc, #104]	; (8000acc <HAL_InitTick+0x88>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	0019      	movs	r1, r3
 8000a66:	23fa      	movs	r3, #250	; 0xfa
 8000a68:	0098      	lsls	r0, r3, #2
 8000a6a:	f7ff fb4d 	bl	8000108 <__udivsi3>
 8000a6e:	0003      	movs	r3, r0
 8000a70:	0019      	movs	r1, r3
 8000a72:	0020      	movs	r0, r4
 8000a74:	f7ff fb48 	bl	8000108 <__udivsi3>
 8000a78:	0003      	movs	r3, r0
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f000 fedf 	bl	800183e <HAL_SYSTICK_Config>
 8000a80:	1e03      	subs	r3, r0, #0
 8000a82:	d112      	bne.n	8000aaa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2b03      	cmp	r3, #3
 8000a88:	d80a      	bhi.n	8000aa0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a8a:	6879      	ldr	r1, [r7, #4]
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	425b      	negs	r3, r3
 8000a90:	2200      	movs	r2, #0
 8000a92:	0018      	movs	r0, r3
 8000a94:	f000 feae 	bl	80017f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a98:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <HAL_InitTick+0x90>)
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	e00d      	b.n	8000abc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000aa0:	230f      	movs	r3, #15
 8000aa2:	18fb      	adds	r3, r7, r3
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	701a      	strb	r2, [r3, #0]
 8000aa8:	e008      	b.n	8000abc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000aaa:	230f      	movs	r3, #15
 8000aac:	18fb      	adds	r3, r7, r3
 8000aae:	2201      	movs	r2, #1
 8000ab0:	701a      	strb	r2, [r3, #0]
 8000ab2:	e003      	b.n	8000abc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ab4:	230f      	movs	r3, #15
 8000ab6:	18fb      	adds	r3, r7, r3
 8000ab8:	2201      	movs	r2, #1
 8000aba:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000abc:	230f      	movs	r3, #15
 8000abe:	18fb      	adds	r3, r7, r3
 8000ac0:	781b      	ldrb	r3, [r3, #0]
}
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	b005      	add	sp, #20
 8000ac8:	bd90      	pop	{r4, r7, pc}
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	20000008 	.word	0x20000008
 8000ad0:	20000000 	.word	0x20000000
 8000ad4:	20000004 	.word	0x20000004

08000ad8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000adc:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <HAL_IncTick+0x18>)
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	4b04      	ldr	r3, [pc, #16]	; (8000af4 <HAL_IncTick+0x1c>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	18d2      	adds	r2, r2, r3
 8000ae6:	4b02      	ldr	r3, [pc, #8]	; (8000af0 <HAL_IncTick+0x18>)
 8000ae8:	601a      	str	r2, [r3, #0]
}
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000090 	.word	0x20000090
 8000af4:	20000008 	.word	0x20000008

08000af8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  return uwTick;
 8000afc:	4b02      	ldr	r3, [pc, #8]	; (8000b08 <HAL_GetTick+0x10>)
 8000afe:	681b      	ldr	r3, [r3, #0]
}
 8000b00:	0018      	movs	r0, r3
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	20000090 	.word	0x20000090

08000b0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b14:	f7ff fff0 	bl	8000af8 <HAL_GetTick>
 8000b18:	0003      	movs	r3, r0
 8000b1a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	3301      	adds	r3, #1
 8000b24:	d004      	beq.n	8000b30 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b26:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <HAL_Delay+0x40>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	68fa      	ldr	r2, [r7, #12]
 8000b2c:	18d3      	adds	r3, r2, r3
 8000b2e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b30:	46c0      	nop			; (mov r8, r8)
 8000b32:	f7ff ffe1 	bl	8000af8 <HAL_GetTick>
 8000b36:	0002      	movs	r2, r0
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	1ad3      	subs	r3, r2, r3
 8000b3c:	68fa      	ldr	r2, [r7, #12]
 8000b3e:	429a      	cmp	r2, r3
 8000b40:	d8f7      	bhi.n	8000b32 <HAL_Delay+0x26>
  {
  }
}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	46c0      	nop			; (mov r8, r8)
 8000b46:	46bd      	mov	sp, r7
 8000b48:	b004      	add	sp, #16
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	20000008 	.word	0x20000008

08000b50 <HAL_SYSCFG_SetPinBinding>:
  *         for each die package
  *         This parameter can be any combination of HAL_BIND_xx defines
  * @retval None
  */
void HAL_SYSCFG_SetPinBinding(uint32_t pin_binding)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_HAL_SYSCFG_PINBINDING(pin_binding));
  LL_SYSCFG_ConfigPinMux(pin_binding);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f7ff ff4c 	bl	80009f8 <LL_SYSCFG_ConfigPinMux>
}
 8000b60:	46c0      	nop			; (mov r8, r8)
 8000b62:	46bd      	mov	sp, r7
 8000b64:	b002      	add	sp, #8
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a05      	ldr	r2, [pc, #20]	; (8000b8c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000b78:	401a      	ands	r2, r3
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	431a      	orrs	r2, r3
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	601a      	str	r2, [r3, #0]
}
 8000b82:	46c0      	nop			; (mov r8, r8)
 8000b84:	46bd      	mov	sp, r7
 8000b86:	b002      	add	sp, #8
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	ff3fffff 	.word	0xff3fffff

08000b90 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	23c0      	movs	r3, #192	; 0xc0
 8000b9e:	041b      	lsls	r3, r3, #16
 8000ba0:	4013      	ands	r3, r2
}
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	b002      	add	sp, #8
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b084      	sub	sp, #16
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	60f8      	str	r0, [r7, #12]
 8000bb2:	60b9      	str	r1, [r7, #8]
 8000bb4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	695b      	ldr	r3, [r3, #20]
 8000bba:	68ba      	ldr	r2, [r7, #8]
 8000bbc:	2104      	movs	r1, #4
 8000bbe:	400a      	ands	r2, r1
 8000bc0:	2107      	movs	r1, #7
 8000bc2:	4091      	lsls	r1, r2
 8000bc4:	000a      	movs	r2, r1
 8000bc6:	43d2      	mvns	r2, r2
 8000bc8:	401a      	ands	r2, r3
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	2104      	movs	r1, #4
 8000bce:	400b      	ands	r3, r1
 8000bd0:	6879      	ldr	r1, [r7, #4]
 8000bd2:	4099      	lsls	r1, r3
 8000bd4:	000b      	movs	r3, r1
 8000bd6:	431a      	orrs	r2, r3
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000bdc:	46c0      	nop			; (mov r8, r8)
 8000bde:	46bd      	mov	sp, r7
 8000be0:	b004      	add	sp, #16
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	695b      	ldr	r3, [r3, #20]
 8000bf2:	683a      	ldr	r2, [r7, #0]
 8000bf4:	2104      	movs	r1, #4
 8000bf6:	400a      	ands	r2, r1
 8000bf8:	2107      	movs	r1, #7
 8000bfa:	4091      	lsls	r1, r2
 8000bfc:	000a      	movs	r2, r1
 8000bfe:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	2104      	movs	r1, #4
 8000c04:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000c06:	40da      	lsrs	r2, r3
 8000c08:	0013      	movs	r3, r2
}
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	b002      	add	sp, #8
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b084      	sub	sp, #16
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	60f8      	str	r0, [r7, #12]
 8000c1a:	60b9      	str	r1, [r7, #8]
 8000c1c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c22:	68ba      	ldr	r2, [r7, #8]
 8000c24:	211f      	movs	r1, #31
 8000c26:	400a      	ands	r2, r1
 8000c28:	210f      	movs	r1, #15
 8000c2a:	4091      	lsls	r1, r2
 8000c2c:	000a      	movs	r2, r1
 8000c2e:	43d2      	mvns	r2, r2
 8000c30:	401a      	ands	r2, r3
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	0e9b      	lsrs	r3, r3, #26
 8000c36:	210f      	movs	r1, #15
 8000c38:	4019      	ands	r1, r3
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	201f      	movs	r0, #31
 8000c3e:	4003      	ands	r3, r0
 8000c40:	4099      	lsls	r1, r3
 8000c42:	000b      	movs	r3, r1
 8000c44:	431a      	orrs	r2, r3
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	b004      	add	sp, #16
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b082      	sub	sp, #8
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
 8000c5a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	025b      	lsls	r3, r3, #9
 8000c64:	0a5b      	lsrs	r3, r3, #9
 8000c66:	431a      	orrs	r2, r3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c6c:	46c0      	nop			; (mov r8, r8)
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	b002      	add	sp, #8
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c82:	683a      	ldr	r2, [r7, #0]
 8000c84:	0252      	lsls	r2, r2, #9
 8000c86:	0a52      	lsrs	r2, r2, #9
 8000c88:	43d2      	mvns	r2, r2
 8000c8a:	401a      	ands	r2, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c90:	46c0      	nop			; (mov r8, r8)
 8000c92:	46bd      	mov	sp, r7
 8000c94:	b002      	add	sp, #8
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	695b      	ldr	r3, [r3, #20]
 8000ca8:	68ba      	ldr	r2, [r7, #8]
 8000caa:	0212      	lsls	r2, r2, #8
 8000cac:	43d2      	mvns	r2, r2
 8000cae:	401a      	ands	r2, r3
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	021b      	lsls	r3, r3, #8
 8000cb4:	6879      	ldr	r1, [r7, #4]
 8000cb6:	400b      	ands	r3, r1
 8000cb8:	4904      	ldr	r1, [pc, #16]	; (8000ccc <LL_ADC_SetChannelSamplingTime+0x34>)
 8000cba:	400b      	ands	r3, r1
 8000cbc:	431a      	orrs	r2, r3
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	b004      	add	sp, #16
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	7fffff00 	.word	0x7fffff00

08000cd0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	4a05      	ldr	r2, [pc, #20]	; (8000cf4 <LL_ADC_EnableInternalRegulator+0x24>)
 8000cde:	4013      	ands	r3, r2
 8000ce0:	2280      	movs	r2, #128	; 0x80
 8000ce2:	0552      	lsls	r2, r2, #21
 8000ce4:	431a      	orrs	r2, r3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	46bd      	mov	sp, r7
 8000cee:	b002      	add	sp, #8
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	46c0      	nop			; (mov r8, r8)
 8000cf4:	6fffffe8 	.word	0x6fffffe8

08000cf8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	689a      	ldr	r2, [r3, #8]
 8000d04:	2380      	movs	r3, #128	; 0x80
 8000d06:	055b      	lsls	r3, r3, #21
 8000d08:	401a      	ands	r2, r3
 8000d0a:	2380      	movs	r3, #128	; 0x80
 8000d0c:	055b      	lsls	r3, r3, #21
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d101      	bne.n	8000d16 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000d12:	2301      	movs	r3, #1
 8000d14:	e000      	b.n	8000d18 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000d16:	2300      	movs	r3, #0
}
 8000d18:	0018      	movs	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	b002      	add	sp, #8
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	4a04      	ldr	r2, [pc, #16]	; (8000d40 <LL_ADC_Enable+0x20>)
 8000d2e:	4013      	ands	r3, r2
 8000d30:	2201      	movs	r2, #1
 8000d32:	431a      	orrs	r2, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000d38:	46c0      	nop			; (mov r8, r8)
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	b002      	add	sp, #8
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	7fffffe8 	.word	0x7fffffe8

08000d44 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	689b      	ldr	r3, [r3, #8]
 8000d50:	2201      	movs	r2, #1
 8000d52:	4013      	ands	r3, r2
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d101      	bne.n	8000d5c <LL_ADC_IsEnabled+0x18>
 8000d58:	2301      	movs	r3, #1
 8000d5a:	e000      	b.n	8000d5e <LL_ADC_IsEnabled+0x1a>
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	0018      	movs	r0, r3
 8000d60:	46bd      	mov	sp, r7
 8000d62:	b002      	add	sp, #8
 8000d64:	bd80      	pop	{r7, pc}
	...

08000d68 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	4a04      	ldr	r2, [pc, #16]	; (8000d88 <LL_ADC_REG_StartConversion+0x20>)
 8000d76:	4013      	ands	r3, r2
 8000d78:	2204      	movs	r2, #4
 8000d7a:	431a      	orrs	r2, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000d80:	46c0      	nop			; (mov r8, r8)
 8000d82:	46bd      	mov	sp, r7
 8000d84:	b002      	add	sp, #8
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	7fffffe8 	.word	0x7fffffe8

08000d8c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	689b      	ldr	r3, [r3, #8]
 8000d98:	2204      	movs	r2, #4
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	2b04      	cmp	r3, #4
 8000d9e:	d101      	bne.n	8000da4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000da0:	2301      	movs	r3, #1
 8000da2:	e000      	b.n	8000da6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	0018      	movs	r0, r3
 8000da8:	46bd      	mov	sp, r7
 8000daa:	b002      	add	sp, #8
 8000dac:	bd80      	pop	{r7, pc}
	...

08000db0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b088      	sub	sp, #32
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000db8:	231f      	movs	r3, #31
 8000dba:	18fb      	adds	r3, r7, r3
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d101      	bne.n	8000dd6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e1a0      	b.n	8001118 <HAL_ADC_Init+0x368>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d10a      	bne.n	8000df4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	0018      	movs	r0, r3
 8000de2:	f7ff fd51 	bl	8000888 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2200      	movs	r2, #0
 8000dea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2254      	movs	r2, #84	; 0x54
 8000df0:	2100      	movs	r1, #0
 8000df2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	0018      	movs	r0, r3
 8000dfa:	f7ff ff7d 	bl	8000cf8 <LL_ADC_IsInternalRegulatorEnabled>
 8000dfe:	1e03      	subs	r3, r0, #0
 8000e00:	d114      	bne.n	8000e2c <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	0018      	movs	r0, r3
 8000e08:	f7ff ff62 	bl	8000cd0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000e0c:	4bc4      	ldr	r3, [pc, #784]	; (8001120 <HAL_ADC_Init+0x370>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	49c4      	ldr	r1, [pc, #784]	; (8001124 <HAL_ADC_Init+0x374>)
 8000e12:	0018      	movs	r0, r3
 8000e14:	f7ff f978 	bl	8000108 <__udivsi3>
 8000e18:	0003      	movs	r3, r0
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000e1e:	e002      	b.n	8000e26 <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d1f9      	bne.n	8000e20 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	0018      	movs	r0, r3
 8000e32:	f7ff ff61 	bl	8000cf8 <LL_ADC_IsInternalRegulatorEnabled>
 8000e36:	1e03      	subs	r3, r0, #0
 8000e38:	d10f      	bne.n	8000e5a <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e3e:	2210      	movs	r2, #16
 8000e40:	431a      	orrs	r2, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	431a      	orrs	r2, r3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000e52:	231f      	movs	r3, #31
 8000e54:	18fb      	adds	r3, r7, r3
 8000e56:	2201      	movs	r2, #1
 8000e58:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	0018      	movs	r0, r3
 8000e60:	f7ff ff94 	bl	8000d8c <LL_ADC_REG_IsConversionOngoing>
 8000e64:	0003      	movs	r3, r0
 8000e66:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e6c:	2210      	movs	r2, #16
 8000e6e:	4013      	ands	r3, r2
 8000e70:	d000      	beq.n	8000e74 <HAL_ADC_Init+0xc4>
 8000e72:	e144      	b.n	80010fe <HAL_ADC_Init+0x34e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d000      	beq.n	8000e7c <HAL_ADC_Init+0xcc>
 8000e7a:	e140      	b.n	80010fe <HAL_ADC_Init+0x34e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e80:	4aa9      	ldr	r2, [pc, #676]	; (8001128 <HAL_ADC_Init+0x378>)
 8000e82:	4013      	ands	r3, r2
 8000e84:	2202      	movs	r2, #2
 8000e86:	431a      	orrs	r2, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	0018      	movs	r0, r3
 8000e92:	f7ff ff57 	bl	8000d44 <LL_ADC_IsEnabled>
 8000e96:	1e03      	subs	r3, r0, #0
 8000e98:	d000      	beq.n	8000e9c <HAL_ADC_Init+0xec>
 8000e9a:	e0ad      	b.n	8000ff8 <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	7e1b      	ldrb	r3, [r3, #24]
 8000ea4:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000ea6:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	7e5b      	ldrb	r3, [r3, #25]
 8000eac:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000eae:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	7e9b      	ldrb	r3, [r3, #26]
 8000eb4:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000eb6:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d002      	beq.n	8000ec6 <HAL_ADC_Init+0x116>
 8000ec0:	2380      	movs	r3, #128	; 0x80
 8000ec2:	015b      	lsls	r3, r3, #5
 8000ec4:	e000      	b.n	8000ec8 <HAL_ADC_Init+0x118>
 8000ec6:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000ec8:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000ece:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	691b      	ldr	r3, [r3, #16]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	da04      	bge.n	8000ee2 <HAL_ADC_Init+0x132>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	691b      	ldr	r3, [r3, #16]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	085b      	lsrs	r3, r3, #1
 8000ee0:	e001      	b.n	8000ee6 <HAL_ADC_Init+0x136>
 8000ee2:	2380      	movs	r3, #128	; 0x80
 8000ee4:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8000ee6:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	212c      	movs	r1, #44	; 0x2c
 8000eec:	5c5b      	ldrb	r3, [r3, r1]
 8000eee:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000ef0:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2220      	movs	r2, #32
 8000efc:	5c9b      	ldrb	r3, [r3, r2]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d115      	bne.n	8000f2e <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	7e9b      	ldrb	r3, [r3, #26]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d105      	bne.n	8000f16 <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	2280      	movs	r2, #128	; 0x80
 8000f0e:	0252      	lsls	r2, r2, #9
 8000f10:	4313      	orrs	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
 8000f14:	e00b      	b.n	8000f2e <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f1a:	2220      	movs	r2, #32
 8000f1c:	431a      	orrs	r2, r3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f26:	2201      	movs	r2, #1
 8000f28:	431a      	orrs	r2, r3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d00a      	beq.n	8000f4c <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f3a:	23e0      	movs	r3, #224	; 0xe0
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000f44:	4313      	orrs	r3, r2
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	68db      	ldr	r3, [r3, #12]
 8000f52:	4a76      	ldr	r2, [pc, #472]	; (800112c <HAL_ADC_Init+0x37c>)
 8000f54:	4013      	ands	r3, r2
 8000f56:	0019      	movs	r1, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	430a      	orrs	r2, r1
 8000f60:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	0f9b      	lsrs	r3, r3, #30
 8000f68:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	697a      	ldr	r2, [r7, #20]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	223c      	movs	r2, #60	; 0x3c
 8000f7a:	5c9b      	ldrb	r3, [r3, r2]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d111      	bne.n	8000fa4 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	0f9b      	lsrs	r3, r3, #30
 8000f86:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000f8c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8000f92:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8000f98:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	691b      	ldr	r3, [r3, #16]
 8000faa:	4a61      	ldr	r2, [pc, #388]	; (8001130 <HAL_ADC_Init+0x380>)
 8000fac:	4013      	ands	r3, r2
 8000fae:	0019      	movs	r1, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	697a      	ldr	r2, [r7, #20]
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	685a      	ldr	r2, [r3, #4]
 8000fbe:	23c0      	movs	r3, #192	; 0xc0
 8000fc0:	061b      	lsls	r3, r3, #24
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d018      	beq.n	8000ff8 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000fca:	2380      	movs	r3, #128	; 0x80
 8000fcc:	05db      	lsls	r3, r3, #23
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d012      	beq.n	8000ff8 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000fd6:	2380      	movs	r3, #128	; 0x80
 8000fd8:	061b      	lsls	r3, r3, #24
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d00c      	beq.n	8000ff8 <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8000fde:	4b55      	ldr	r3, [pc, #340]	; (8001134 <HAL_ADC_Init+0x384>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a55      	ldr	r2, [pc, #340]	; (8001138 <HAL_ADC_Init+0x388>)
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	0019      	movs	r1, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685a      	ldr	r2, [r3, #4]
 8000fec:	23f0      	movs	r3, #240	; 0xf0
 8000fee:	039b      	lsls	r3, r3, #14
 8000ff0:	401a      	ands	r2, r3
 8000ff2:	4b50      	ldr	r3, [pc, #320]	; (8001134 <HAL_ADC_Init+0x384>)
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6818      	ldr	r0, [r3, #0]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001000:	001a      	movs	r2, r3
 8001002:	2100      	movs	r1, #0
 8001004:	f7ff fdd1 	bl	8000baa <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6818      	ldr	r0, [r3, #0]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001010:	494a      	ldr	r1, [pc, #296]	; (800113c <HAL_ADC_Init+0x38c>)
 8001012:	001a      	movs	r2, r3
 8001014:	f7ff fdc9 	bl	8000baa <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	691b      	ldr	r3, [r3, #16]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d109      	bne.n	8001034 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2110      	movs	r1, #16
 800102c:	4249      	negs	r1, r1
 800102e:	430a      	orrs	r2, r1
 8001030:	629a      	str	r2, [r3, #40]	; 0x28
 8001032:	e03a      	b.n	80010aa <HAL_ADC_Init+0x2fa>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	691a      	ldr	r2, [r3, #16]
 8001038:	2380      	movs	r3, #128	; 0x80
 800103a:	039b      	lsls	r3, r3, #14
 800103c:	429a      	cmp	r2, r3
 800103e:	d134      	bne.n	80010aa <HAL_ADC_Init+0x2fa>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8001040:	2300      	movs	r3, #0
 8001042:	613b      	str	r3, [r7, #16]
 8001044:	e00c      	b.n	8001060 <HAL_ADC_Init+0x2b0>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	40da      	lsrs	r2, r3
 8001050:	0013      	movs	r3, r2
 8001052:	220f      	movs	r2, #15
 8001054:	4013      	ands	r3, r2
 8001056:	2b0f      	cmp	r3, #15
 8001058:	d006      	beq.n	8001068 <HAL_ADC_Init+0x2b8>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	3301      	adds	r3, #1
 800105e:	613b      	str	r3, [r7, #16]
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	2b07      	cmp	r3, #7
 8001064:	d9ef      	bls.n	8001046 <HAL_ADC_Init+0x296>
 8001066:	e000      	b.n	800106a <HAL_ADC_Init+0x2ba>
            ADC_CHSELR_SQ1)
        {
          break;
 8001068:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d109      	bne.n	8001084 <HAL_ADC_Init+0x2d4>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2110      	movs	r1, #16
 800107c:	4249      	negs	r1, r1
 800107e:	430a      	orrs	r2, r1
 8001080:	629a      	str	r2, [r3, #40]	; 0x28
 8001082:	e012      	b.n	80010aa <HAL_ADC_Init+0x2fa>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	69db      	ldr	r3, [r3, #28]
 800108e:	3b01      	subs	r3, #1
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	221c      	movs	r2, #28
 8001094:	4013      	ands	r3, r2
 8001096:	2210      	movs	r2, #16
 8001098:	4252      	negs	r2, r2
 800109a:	409a      	lsls	r2, r3
 800109c:	0011      	movs	r1, r2
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	430a      	orrs	r2, r1
 80010a8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2100      	movs	r1, #0
 80010b0:	0018      	movs	r0, r3
 80010b2:	f7ff fd97 	bl	8000be4 <LL_ADC_GetSamplingTimeCommonChannels>
 80010b6:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80010bc:	429a      	cmp	r2, r3
 80010be:	d10b      	bne.n	80010d8 <HAL_ADC_Init+0x328>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2200      	movs	r2, #0
 80010c4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ca:	2203      	movs	r2, #3
 80010cc:	4393      	bics	r3, r2
 80010ce:	2201      	movs	r2, #1
 80010d0:	431a      	orrs	r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80010d6:	e01c      	b.n	8001112 <HAL_ADC_Init+0x362>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010dc:	2212      	movs	r2, #18
 80010de:	4393      	bics	r3, r2
 80010e0:	2210      	movs	r2, #16
 80010e2:	431a      	orrs	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010ec:	2201      	movs	r2, #1
 80010ee:	431a      	orrs	r2, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80010f4:	231f      	movs	r3, #31
 80010f6:	18fb      	adds	r3, r7, r3
 80010f8:	2201      	movs	r2, #1
 80010fa:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80010fc:	e009      	b.n	8001112 <HAL_ADC_Init+0x362>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001102:	2210      	movs	r2, #16
 8001104:	431a      	orrs	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800110a:	231f      	movs	r3, #31
 800110c:	18fb      	adds	r3, r7, r3
 800110e:	2201      	movs	r2, #1
 8001110:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8001112:	231f      	movs	r3, #31
 8001114:	18fb      	adds	r3, r7, r3
 8001116:	781b      	ldrb	r3, [r3, #0]
}
 8001118:	0018      	movs	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	b008      	add	sp, #32
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20000000 	.word	0x20000000
 8001124:	00030d40 	.word	0x00030d40
 8001128:	fffffefd 	.word	0xfffffefd
 800112c:	fffe0201 	.word	0xfffe0201
 8001130:	1ffffc02 	.word	0x1ffffc02
 8001134:	40012708 	.word	0x40012708
 8001138:	ffc3ffff 	.word	0xffc3ffff
 800113c:	7fffff04 	.word	0x7fffff04

08001140 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001140:	b5b0      	push	{r4, r5, r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	0018      	movs	r0, r3
 800114e:	f7ff fe1d 	bl	8000d8c <LL_ADC_REG_IsConversionOngoing>
 8001152:	1e03      	subs	r3, r0, #0
 8001154:	d135      	bne.n	80011c2 <HAL_ADC_Start+0x82>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2254      	movs	r2, #84	; 0x54
 800115a:	5c9b      	ldrb	r3, [r3, r2]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d101      	bne.n	8001164 <HAL_ADC_Start+0x24>
 8001160:	2302      	movs	r3, #2
 8001162:	e035      	b.n	80011d0 <HAL_ADC_Start+0x90>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2254      	movs	r2, #84	; 0x54
 8001168:	2101      	movs	r1, #1
 800116a:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800116c:	250f      	movs	r5, #15
 800116e:	197c      	adds	r4, r7, r5
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	0018      	movs	r0, r3
 8001174:	f000 fa14 	bl	80015a0 <ADC_Enable>
 8001178:	0003      	movs	r3, r0
 800117a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800117c:	197b      	adds	r3, r7, r5
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d119      	bne.n	80011b8 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001188:	4a13      	ldr	r2, [pc, #76]	; (80011d8 <HAL_ADC_Start+0x98>)
 800118a:	4013      	ands	r3, r2
 800118c:	2280      	movs	r2, #128	; 0x80
 800118e:	0052      	lsls	r2, r2, #1
 8001190:	431a      	orrs	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	221c      	movs	r2, #28
 80011a2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2254      	movs	r2, #84	; 0x54
 80011a8:	2100      	movs	r1, #0
 80011aa:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	0018      	movs	r0, r3
 80011b2:	f7ff fdd9 	bl	8000d68 <LL_ADC_REG_StartConversion>
 80011b6:	e008      	b.n	80011ca <HAL_ADC_Start+0x8a>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2254      	movs	r2, #84	; 0x54
 80011bc:	2100      	movs	r1, #0
 80011be:	5499      	strb	r1, [r3, r2]
 80011c0:	e003      	b.n	80011ca <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80011c2:	230f      	movs	r3, #15
 80011c4:	18fb      	adds	r3, r7, r3
 80011c6:	2202      	movs	r2, #2
 80011c8:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80011ca:	230f      	movs	r3, #15
 80011cc:	18fb      	adds	r3, r7, r3
 80011ce:	781b      	ldrb	r3, [r3, #0]
}
 80011d0:	0018      	movs	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	b004      	add	sp, #16
 80011d6:	bdb0      	pop	{r4, r5, r7, pc}
 80011d8:	fffff0fe 	.word	0xfffff0fe

080011dc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80011ea:	0018      	movs	r0, r3
 80011ec:	46bd      	mov	sp, r7
 80011ee:	b002      	add	sp, #8
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011fe:	2317      	movs	r3, #23
 8001200:	18fb      	adds	r3, r7, r3
 8001202:	2200      	movs	r2, #0
 8001204:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2254      	movs	r2, #84	; 0x54
 800120e:	5c9b      	ldrb	r3, [r3, r2]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d101      	bne.n	8001218 <HAL_ADC_ConfigChannel+0x24>
 8001214:	2302      	movs	r3, #2
 8001216:	e1be      	b.n	8001596 <HAL_ADC_ConfigChannel+0x3a2>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2254      	movs	r2, #84	; 0x54
 800121c:	2101      	movs	r1, #1
 800121e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	0018      	movs	r0, r3
 8001226:	f7ff fdb1 	bl	8000d8c <LL_ADC_REG_IsConversionOngoing>
 800122a:	1e03      	subs	r3, r0, #0
 800122c:	d000      	beq.n	8001230 <HAL_ADC_ConfigChannel+0x3c>
 800122e:	e1a1      	b.n	8001574 <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	2b02      	cmp	r3, #2
 8001236:	d100      	bne.n	800123a <HAL_ADC_ConfigChannel+0x46>
 8001238:	e152      	b.n	80014e0 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	691a      	ldr	r2, [r3, #16]
 800123e:	2380      	movs	r3, #128	; 0x80
 8001240:	061b      	lsls	r3, r3, #24
 8001242:	429a      	cmp	r2, r3
 8001244:	d004      	beq.n	8001250 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800124a:	4ac2      	ldr	r2, [pc, #776]	; (8001554 <HAL_ADC_ConfigChannel+0x360>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d108      	bne.n	8001262 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	0019      	movs	r1, r3
 800125a:	0010      	movs	r0, r2
 800125c:	f7ff fcf9 	bl	8000c52 <LL_ADC_REG_SetSequencerChAdd>
 8001260:	e0ed      	b.n	800143e <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	211f      	movs	r1, #31
 800126c:	400b      	ands	r3, r1
 800126e:	210f      	movs	r1, #15
 8001270:	4099      	lsls	r1, r3
 8001272:	000b      	movs	r3, r1
 8001274:	43db      	mvns	r3, r3
 8001276:	4013      	ands	r3, r2
 8001278:	0019      	movs	r1, r3
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	025b      	lsls	r3, r3, #9
 8001280:	0a5b      	lsrs	r3, r3, #9
 8001282:	d105      	bne.n	8001290 <HAL_ADC_ConfigChannel+0x9c>
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	0e9b      	lsrs	r3, r3, #26
 800128a:	221f      	movs	r2, #31
 800128c:	4013      	ands	r3, r2
 800128e:	e0bc      	b.n	800140a <HAL_ADC_ConfigChannel+0x216>
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2201      	movs	r2, #1
 8001296:	4013      	ands	r3, r2
 8001298:	d000      	beq.n	800129c <HAL_ADC_ConfigChannel+0xa8>
 800129a:	e0b5      	b.n	8001408 <HAL_ADC_ConfigChannel+0x214>
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2202      	movs	r2, #2
 80012a2:	4013      	ands	r3, r2
 80012a4:	d000      	beq.n	80012a8 <HAL_ADC_ConfigChannel+0xb4>
 80012a6:	e0ad      	b.n	8001404 <HAL_ADC_ConfigChannel+0x210>
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2204      	movs	r2, #4
 80012ae:	4013      	ands	r3, r2
 80012b0:	d000      	beq.n	80012b4 <HAL_ADC_ConfigChannel+0xc0>
 80012b2:	e0a5      	b.n	8001400 <HAL_ADC_ConfigChannel+0x20c>
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2208      	movs	r2, #8
 80012ba:	4013      	ands	r3, r2
 80012bc:	d000      	beq.n	80012c0 <HAL_ADC_ConfigChannel+0xcc>
 80012be:	e09d      	b.n	80013fc <HAL_ADC_ConfigChannel+0x208>
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2210      	movs	r2, #16
 80012c6:	4013      	ands	r3, r2
 80012c8:	d000      	beq.n	80012cc <HAL_ADC_ConfigChannel+0xd8>
 80012ca:	e095      	b.n	80013f8 <HAL_ADC_ConfigChannel+0x204>
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2220      	movs	r2, #32
 80012d2:	4013      	ands	r3, r2
 80012d4:	d000      	beq.n	80012d8 <HAL_ADC_ConfigChannel+0xe4>
 80012d6:	e08d      	b.n	80013f4 <HAL_ADC_ConfigChannel+0x200>
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2240      	movs	r2, #64	; 0x40
 80012de:	4013      	ands	r3, r2
 80012e0:	d000      	beq.n	80012e4 <HAL_ADC_ConfigChannel+0xf0>
 80012e2:	e085      	b.n	80013f0 <HAL_ADC_ConfigChannel+0x1fc>
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2280      	movs	r2, #128	; 0x80
 80012ea:	4013      	ands	r3, r2
 80012ec:	d000      	beq.n	80012f0 <HAL_ADC_ConfigChannel+0xfc>
 80012ee:	e07d      	b.n	80013ec <HAL_ADC_ConfigChannel+0x1f8>
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	2380      	movs	r3, #128	; 0x80
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	4013      	ands	r3, r2
 80012fa:	d000      	beq.n	80012fe <HAL_ADC_ConfigChannel+0x10a>
 80012fc:	e074      	b.n	80013e8 <HAL_ADC_ConfigChannel+0x1f4>
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	2380      	movs	r3, #128	; 0x80
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4013      	ands	r3, r2
 8001308:	d000      	beq.n	800130c <HAL_ADC_ConfigChannel+0x118>
 800130a:	e06b      	b.n	80013e4 <HAL_ADC_ConfigChannel+0x1f0>
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	2380      	movs	r3, #128	; 0x80
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	4013      	ands	r3, r2
 8001316:	d000      	beq.n	800131a <HAL_ADC_ConfigChannel+0x126>
 8001318:	e062      	b.n	80013e0 <HAL_ADC_ConfigChannel+0x1ec>
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	2380      	movs	r3, #128	; 0x80
 8001320:	011b      	lsls	r3, r3, #4
 8001322:	4013      	ands	r3, r2
 8001324:	d000      	beq.n	8001328 <HAL_ADC_ConfigChannel+0x134>
 8001326:	e059      	b.n	80013dc <HAL_ADC_ConfigChannel+0x1e8>
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	2380      	movs	r3, #128	; 0x80
 800132e:	015b      	lsls	r3, r3, #5
 8001330:	4013      	ands	r3, r2
 8001332:	d151      	bne.n	80013d8 <HAL_ADC_ConfigChannel+0x1e4>
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	2380      	movs	r3, #128	; 0x80
 800133a:	019b      	lsls	r3, r3, #6
 800133c:	4013      	ands	r3, r2
 800133e:	d149      	bne.n	80013d4 <HAL_ADC_ConfigChannel+0x1e0>
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	2380      	movs	r3, #128	; 0x80
 8001346:	01db      	lsls	r3, r3, #7
 8001348:	4013      	ands	r3, r2
 800134a:	d141      	bne.n	80013d0 <HAL_ADC_ConfigChannel+0x1dc>
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	2380      	movs	r3, #128	; 0x80
 8001352:	021b      	lsls	r3, r3, #8
 8001354:	4013      	ands	r3, r2
 8001356:	d139      	bne.n	80013cc <HAL_ADC_ConfigChannel+0x1d8>
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	2380      	movs	r3, #128	; 0x80
 800135e:	025b      	lsls	r3, r3, #9
 8001360:	4013      	ands	r3, r2
 8001362:	d131      	bne.n	80013c8 <HAL_ADC_ConfigChannel+0x1d4>
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	2380      	movs	r3, #128	; 0x80
 800136a:	029b      	lsls	r3, r3, #10
 800136c:	4013      	ands	r3, r2
 800136e:	d129      	bne.n	80013c4 <HAL_ADC_ConfigChannel+0x1d0>
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	2380      	movs	r3, #128	; 0x80
 8001376:	02db      	lsls	r3, r3, #11
 8001378:	4013      	ands	r3, r2
 800137a:	d121      	bne.n	80013c0 <HAL_ADC_ConfigChannel+0x1cc>
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	2380      	movs	r3, #128	; 0x80
 8001382:	031b      	lsls	r3, r3, #12
 8001384:	4013      	ands	r3, r2
 8001386:	d119      	bne.n	80013bc <HAL_ADC_ConfigChannel+0x1c8>
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	2380      	movs	r3, #128	; 0x80
 800138e:	035b      	lsls	r3, r3, #13
 8001390:	4013      	ands	r3, r2
 8001392:	d111      	bne.n	80013b8 <HAL_ADC_ConfigChannel+0x1c4>
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	2380      	movs	r3, #128	; 0x80
 800139a:	039b      	lsls	r3, r3, #14
 800139c:	4013      	ands	r3, r2
 800139e:	d109      	bne.n	80013b4 <HAL_ADC_ConfigChannel+0x1c0>
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	2380      	movs	r3, #128	; 0x80
 80013a6:	03db      	lsls	r3, r3, #15
 80013a8:	4013      	ands	r3, r2
 80013aa:	d001      	beq.n	80013b0 <HAL_ADC_ConfigChannel+0x1bc>
 80013ac:	2316      	movs	r3, #22
 80013ae:	e02c      	b.n	800140a <HAL_ADC_ConfigChannel+0x216>
 80013b0:	2300      	movs	r3, #0
 80013b2:	e02a      	b.n	800140a <HAL_ADC_ConfigChannel+0x216>
 80013b4:	2315      	movs	r3, #21
 80013b6:	e028      	b.n	800140a <HAL_ADC_ConfigChannel+0x216>
 80013b8:	2314      	movs	r3, #20
 80013ba:	e026      	b.n	800140a <HAL_ADC_ConfigChannel+0x216>
 80013bc:	2313      	movs	r3, #19
 80013be:	e024      	b.n	800140a <HAL_ADC_ConfigChannel+0x216>
 80013c0:	2312      	movs	r3, #18
 80013c2:	e022      	b.n	800140a <HAL_ADC_ConfigChannel+0x216>
 80013c4:	2311      	movs	r3, #17
 80013c6:	e020      	b.n	800140a <HAL_ADC_ConfigChannel+0x216>
 80013c8:	2310      	movs	r3, #16
 80013ca:	e01e      	b.n	800140a <HAL_ADC_ConfigChannel+0x216>
 80013cc:	230f      	movs	r3, #15
 80013ce:	e01c      	b.n	800140a <HAL_ADC_ConfigChannel+0x216>
 80013d0:	230e      	movs	r3, #14
 80013d2:	e01a      	b.n	800140a <HAL_ADC_ConfigChannel+0x216>
 80013d4:	230d      	movs	r3, #13
 80013d6:	e018      	b.n	800140a <HAL_ADC_ConfigChannel+0x216>
 80013d8:	230c      	movs	r3, #12
 80013da:	e016      	b.n	800140a <HAL_ADC_ConfigChannel+0x216>
 80013dc:	230b      	movs	r3, #11
 80013de:	e014      	b.n	800140a <HAL_ADC_ConfigChannel+0x216>
 80013e0:	230a      	movs	r3, #10
 80013e2:	e012      	b.n	800140a <HAL_ADC_ConfigChannel+0x216>
 80013e4:	2309      	movs	r3, #9
 80013e6:	e010      	b.n	800140a <HAL_ADC_ConfigChannel+0x216>
 80013e8:	2308      	movs	r3, #8
 80013ea:	e00e      	b.n	800140a <HAL_ADC_ConfigChannel+0x216>
 80013ec:	2307      	movs	r3, #7
 80013ee:	e00c      	b.n	800140a <HAL_ADC_ConfigChannel+0x216>
 80013f0:	2306      	movs	r3, #6
 80013f2:	e00a      	b.n	800140a <HAL_ADC_ConfigChannel+0x216>
 80013f4:	2305      	movs	r3, #5
 80013f6:	e008      	b.n	800140a <HAL_ADC_ConfigChannel+0x216>
 80013f8:	2304      	movs	r3, #4
 80013fa:	e006      	b.n	800140a <HAL_ADC_ConfigChannel+0x216>
 80013fc:	2303      	movs	r3, #3
 80013fe:	e004      	b.n	800140a <HAL_ADC_ConfigChannel+0x216>
 8001400:	2302      	movs	r3, #2
 8001402:	e002      	b.n	800140a <HAL_ADC_ConfigChannel+0x216>
 8001404:	2301      	movs	r3, #1
 8001406:	e000      	b.n	800140a <HAL_ADC_ConfigChannel+0x216>
 8001408:	2300      	movs	r3, #0
 800140a:	683a      	ldr	r2, [r7, #0]
 800140c:	6852      	ldr	r2, [r2, #4]
 800140e:	201f      	movs	r0, #31
 8001410:	4002      	ands	r2, r0
 8001412:	4093      	lsls	r3, r2
 8001414:	000a      	movs	r2, r1
 8001416:	431a      	orrs	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	089b      	lsrs	r3, r3, #2
 8001422:	1c5a      	adds	r2, r3, #1
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	69db      	ldr	r3, [r3, #28]
 8001428:	429a      	cmp	r2, r3
 800142a:	d808      	bhi.n	800143e <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6818      	ldr	r0, [r3, #0]
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	6859      	ldr	r1, [r3, #4]
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	001a      	movs	r2, r3
 800143a:	f7ff fbea 	bl	8000c12 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6818      	ldr	r0, [r3, #0]
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	6819      	ldr	r1, [r3, #0]
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	001a      	movs	r2, r3
 800144c:	f7ff fc24 	bl	8000c98 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	db00      	blt.n	800145a <HAL_ADC_ConfigChannel+0x266>
 8001458:	e096      	b.n	8001588 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800145a:	4b3f      	ldr	r3, [pc, #252]	; (8001558 <HAL_ADC_ConfigChannel+0x364>)
 800145c:	0018      	movs	r0, r3
 800145e:	f7ff fb97 	bl	8000b90 <LL_ADC_GetCommonPathInternalCh>
 8001462:	0003      	movs	r3, r0
 8001464:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a3c      	ldr	r2, [pc, #240]	; (800155c <HAL_ADC_ConfigChannel+0x368>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d123      	bne.n	80014b8 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	2380      	movs	r3, #128	; 0x80
 8001474:	041b      	lsls	r3, r3, #16
 8001476:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001478:	d11e      	bne.n	80014b8 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	2280      	movs	r2, #128	; 0x80
 800147e:	0412      	lsls	r2, r2, #16
 8001480:	4313      	orrs	r3, r2
 8001482:	4a35      	ldr	r2, [pc, #212]	; (8001558 <HAL_ADC_ConfigChannel+0x364>)
 8001484:	0019      	movs	r1, r3
 8001486:	0010      	movs	r0, r2
 8001488:	f7ff fb6e 	bl	8000b68 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 800148c:	4b34      	ldr	r3, [pc, #208]	; (8001560 <HAL_ADC_ConfigChannel+0x36c>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4934      	ldr	r1, [pc, #208]	; (8001564 <HAL_ADC_ConfigChannel+0x370>)
 8001492:	0018      	movs	r0, r3
 8001494:	f7fe fe38 	bl	8000108 <__udivsi3>
 8001498:	0003      	movs	r3, r0
 800149a:	001a      	movs	r2, r3
 800149c:	0013      	movs	r3, r2
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	189b      	adds	r3, r3, r2
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	3301      	adds	r3, #1
 80014a6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80014a8:	e002      	b.n	80014b0 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	3b01      	subs	r3, #1
 80014ae:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1f9      	bne.n	80014aa <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80014b6:	e067      	b.n	8001588 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a2a      	ldr	r2, [pc, #168]	; (8001568 <HAL_ADC_ConfigChannel+0x374>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d162      	bne.n	8001588 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	2380      	movs	r3, #128	; 0x80
 80014c6:	03db      	lsls	r3, r3, #15
 80014c8:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80014ca:	d15d      	bne.n	8001588 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	2280      	movs	r2, #128	; 0x80
 80014d0:	03d2      	lsls	r2, r2, #15
 80014d2:	4313      	orrs	r3, r2
 80014d4:	4a20      	ldr	r2, [pc, #128]	; (8001558 <HAL_ADC_ConfigChannel+0x364>)
 80014d6:	0019      	movs	r1, r3
 80014d8:	0010      	movs	r0, r2
 80014da:	f7ff fb45 	bl	8000b68 <LL_ADC_SetCommonPathInternalCh>
 80014de:	e053      	b.n	8001588 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	691a      	ldr	r2, [r3, #16]
 80014e4:	2380      	movs	r3, #128	; 0x80
 80014e6:	061b      	lsls	r3, r3, #24
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d004      	beq.n	80014f6 <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80014f0:	4a18      	ldr	r2, [pc, #96]	; (8001554 <HAL_ADC_ConfigChannel+0x360>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d107      	bne.n	8001506 <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	0019      	movs	r1, r3
 8001500:	0010      	movs	r0, r2
 8001502:	f7ff fbb7 	bl	8000c74 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	da3c      	bge.n	8001588 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800150e:	4b12      	ldr	r3, [pc, #72]	; (8001558 <HAL_ADC_ConfigChannel+0x364>)
 8001510:	0018      	movs	r0, r3
 8001512:	f7ff fb3d 	bl	8000b90 <LL_ADC_GetCommonPathInternalCh>
 8001516:	0003      	movs	r3, r0
 8001518:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a0f      	ldr	r2, [pc, #60]	; (800155c <HAL_ADC_ConfigChannel+0x368>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d108      	bne.n	8001536 <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	4a11      	ldr	r2, [pc, #68]	; (800156c <HAL_ADC_ConfigChannel+0x378>)
 8001528:	4013      	ands	r3, r2
 800152a:	4a0b      	ldr	r2, [pc, #44]	; (8001558 <HAL_ADC_ConfigChannel+0x364>)
 800152c:	0019      	movs	r1, r3
 800152e:	0010      	movs	r0, r2
 8001530:	f7ff fb1a 	bl	8000b68 <LL_ADC_SetCommonPathInternalCh>
 8001534:	e028      	b.n	8001588 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a0b      	ldr	r2, [pc, #44]	; (8001568 <HAL_ADC_ConfigChannel+0x374>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d123      	bne.n	8001588 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	4a0b      	ldr	r2, [pc, #44]	; (8001570 <HAL_ADC_ConfigChannel+0x37c>)
 8001544:	4013      	ands	r3, r2
 8001546:	4a04      	ldr	r2, [pc, #16]	; (8001558 <HAL_ADC_ConfigChannel+0x364>)
 8001548:	0019      	movs	r1, r3
 800154a:	0010      	movs	r0, r2
 800154c:	f7ff fb0c 	bl	8000b68 <LL_ADC_SetCommonPathInternalCh>
 8001550:	e01a      	b.n	8001588 <HAL_ADC_ConfigChannel+0x394>
 8001552:	46c0      	nop			; (mov r8, r8)
 8001554:	80000004 	.word	0x80000004
 8001558:	40012708 	.word	0x40012708
 800155c:	a4000200 	.word	0xa4000200
 8001560:	20000000 	.word	0x20000000
 8001564:	00030d40 	.word	0x00030d40
 8001568:	a8000400 	.word	0xa8000400
 800156c:	ff7fffff 	.word	0xff7fffff
 8001570:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001578:	2220      	movs	r2, #32
 800157a:	431a      	orrs	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001580:	2317      	movs	r3, #23
 8001582:	18fb      	adds	r3, r7, r3
 8001584:	2201      	movs	r2, #1
 8001586:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2254      	movs	r2, #84	; 0x54
 800158c:	2100      	movs	r1, #0
 800158e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8001590:	2317      	movs	r3, #23
 8001592:	18fb      	adds	r3, r7, r3
 8001594:	781b      	ldrb	r3, [r3, #0]
}
 8001596:	0018      	movs	r0, r3
 8001598:	46bd      	mov	sp, r7
 800159a:	b006      	add	sp, #24
 800159c:	bd80      	pop	{r7, pc}
 800159e:	46c0      	nop			; (mov r8, r8)

080015a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	0018      	movs	r0, r3
 80015b2:	f7ff fbc7 	bl	8000d44 <LL_ADC_IsEnabled>
 80015b6:	1e03      	subs	r3, r0, #0
 80015b8:	d162      	bne.n	8001680 <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	4a32      	ldr	r2, [pc, #200]	; (800168c <ADC_Enable+0xec>)
 80015c2:	4013      	ands	r3, r2
 80015c4:	d00d      	beq.n	80015e2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ca:	2210      	movs	r2, #16
 80015cc:	431a      	orrs	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d6:	2201      	movs	r2, #1
 80015d8:	431a      	orrs	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e04f      	b.n	8001682 <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	0018      	movs	r0, r3
 80015e8:	f7ff fb9a 	bl	8000d20 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80015ec:	4b28      	ldr	r3, [pc, #160]	; (8001690 <ADC_Enable+0xf0>)
 80015ee:	0018      	movs	r0, r3
 80015f0:	f7ff face 	bl	8000b90 <LL_ADC_GetCommonPathInternalCh>
 80015f4:	0002      	movs	r2, r0
 80015f6:	2380      	movs	r3, #128	; 0x80
 80015f8:	041b      	lsls	r3, r3, #16
 80015fa:	4013      	ands	r3, r2
 80015fc:	d00f      	beq.n	800161e <ADC_Enable+0x7e>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 80015fe:	4b25      	ldr	r3, [pc, #148]	; (8001694 <ADC_Enable+0xf4>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4925      	ldr	r1, [pc, #148]	; (8001698 <ADC_Enable+0xf8>)
 8001604:	0018      	movs	r0, r3
 8001606:	f7fe fd7f 	bl	8000108 <__udivsi3>
 800160a:	0003      	movs	r3, r0
 800160c:	3301      	adds	r3, #1
 800160e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001610:	e002      	b.n	8001618 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	3b01      	subs	r3, #1
 8001616:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1f9      	bne.n	8001612 <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	7e5b      	ldrb	r3, [r3, #25]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d02c      	beq.n	8001680 <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001626:	f7ff fa67 	bl	8000af8 <HAL_GetTick>
 800162a:	0003      	movs	r3, r0
 800162c:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800162e:	e020      	b.n	8001672 <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	0018      	movs	r0, r3
 8001636:	f7ff fb85 	bl	8000d44 <LL_ADC_IsEnabled>
 800163a:	1e03      	subs	r3, r0, #0
 800163c:	d104      	bne.n	8001648 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	0018      	movs	r0, r3
 8001644:	f7ff fb6c 	bl	8000d20 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001648:	f7ff fa56 	bl	8000af8 <HAL_GetTick>
 800164c:	0002      	movs	r2, r0
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d90d      	bls.n	8001672 <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800165a:	2210      	movs	r2, #16
 800165c:	431a      	orrs	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001666:	2201      	movs	r2, #1
 8001668:	431a      	orrs	r2, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e007      	b.n	8001682 <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2201      	movs	r2, #1
 800167a:	4013      	ands	r3, r2
 800167c:	2b01      	cmp	r3, #1
 800167e:	d1d7      	bne.n	8001630 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	0018      	movs	r0, r3
 8001684:	46bd      	mov	sp, r7
 8001686:	b004      	add	sp, #16
 8001688:	bd80      	pop	{r7, pc}
 800168a:	46c0      	nop			; (mov r8, r8)
 800168c:	80000017 	.word	0x80000017
 8001690:	40012708 	.word	0x40012708
 8001694:	20000000 	.word	0x20000000
 8001698:	00030d40 	.word	0x00030d40

0800169c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	0002      	movs	r2, r0
 80016a4:	1dfb      	adds	r3, r7, #7
 80016a6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80016a8:	1dfb      	adds	r3, r7, #7
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b7f      	cmp	r3, #127	; 0x7f
 80016ae:	d809      	bhi.n	80016c4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016b0:	1dfb      	adds	r3, r7, #7
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	001a      	movs	r2, r3
 80016b6:	231f      	movs	r3, #31
 80016b8:	401a      	ands	r2, r3
 80016ba:	4b04      	ldr	r3, [pc, #16]	; (80016cc <__NVIC_EnableIRQ+0x30>)
 80016bc:	2101      	movs	r1, #1
 80016be:	4091      	lsls	r1, r2
 80016c0:	000a      	movs	r2, r1
 80016c2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80016c4:	46c0      	nop			; (mov r8, r8)
 80016c6:	46bd      	mov	sp, r7
 80016c8:	b002      	add	sp, #8
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	e000e100 	.word	0xe000e100

080016d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016d0:	b590      	push	{r4, r7, lr}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	0002      	movs	r2, r0
 80016d8:	6039      	str	r1, [r7, #0]
 80016da:	1dfb      	adds	r3, r7, #7
 80016dc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80016de:	1dfb      	adds	r3, r7, #7
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	2b7f      	cmp	r3, #127	; 0x7f
 80016e4:	d828      	bhi.n	8001738 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016e6:	4a2f      	ldr	r2, [pc, #188]	; (80017a4 <__NVIC_SetPriority+0xd4>)
 80016e8:	1dfb      	adds	r3, r7, #7
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	b25b      	sxtb	r3, r3
 80016ee:	089b      	lsrs	r3, r3, #2
 80016f0:	33c0      	adds	r3, #192	; 0xc0
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	589b      	ldr	r3, [r3, r2]
 80016f6:	1dfa      	adds	r2, r7, #7
 80016f8:	7812      	ldrb	r2, [r2, #0]
 80016fa:	0011      	movs	r1, r2
 80016fc:	2203      	movs	r2, #3
 80016fe:	400a      	ands	r2, r1
 8001700:	00d2      	lsls	r2, r2, #3
 8001702:	21ff      	movs	r1, #255	; 0xff
 8001704:	4091      	lsls	r1, r2
 8001706:	000a      	movs	r2, r1
 8001708:	43d2      	mvns	r2, r2
 800170a:	401a      	ands	r2, r3
 800170c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	019b      	lsls	r3, r3, #6
 8001712:	22ff      	movs	r2, #255	; 0xff
 8001714:	401a      	ands	r2, r3
 8001716:	1dfb      	adds	r3, r7, #7
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	0018      	movs	r0, r3
 800171c:	2303      	movs	r3, #3
 800171e:	4003      	ands	r3, r0
 8001720:	00db      	lsls	r3, r3, #3
 8001722:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001724:	481f      	ldr	r0, [pc, #124]	; (80017a4 <__NVIC_SetPriority+0xd4>)
 8001726:	1dfb      	adds	r3, r7, #7
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	b25b      	sxtb	r3, r3
 800172c:	089b      	lsrs	r3, r3, #2
 800172e:	430a      	orrs	r2, r1
 8001730:	33c0      	adds	r3, #192	; 0xc0
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001736:	e031      	b.n	800179c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001738:	4a1b      	ldr	r2, [pc, #108]	; (80017a8 <__NVIC_SetPriority+0xd8>)
 800173a:	1dfb      	adds	r3, r7, #7
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	0019      	movs	r1, r3
 8001740:	230f      	movs	r3, #15
 8001742:	400b      	ands	r3, r1
 8001744:	3b08      	subs	r3, #8
 8001746:	089b      	lsrs	r3, r3, #2
 8001748:	3306      	adds	r3, #6
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	18d3      	adds	r3, r2, r3
 800174e:	3304      	adds	r3, #4
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	1dfa      	adds	r2, r7, #7
 8001754:	7812      	ldrb	r2, [r2, #0]
 8001756:	0011      	movs	r1, r2
 8001758:	2203      	movs	r2, #3
 800175a:	400a      	ands	r2, r1
 800175c:	00d2      	lsls	r2, r2, #3
 800175e:	21ff      	movs	r1, #255	; 0xff
 8001760:	4091      	lsls	r1, r2
 8001762:	000a      	movs	r2, r1
 8001764:	43d2      	mvns	r2, r2
 8001766:	401a      	ands	r2, r3
 8001768:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	019b      	lsls	r3, r3, #6
 800176e:	22ff      	movs	r2, #255	; 0xff
 8001770:	401a      	ands	r2, r3
 8001772:	1dfb      	adds	r3, r7, #7
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	0018      	movs	r0, r3
 8001778:	2303      	movs	r3, #3
 800177a:	4003      	ands	r3, r0
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001780:	4809      	ldr	r0, [pc, #36]	; (80017a8 <__NVIC_SetPriority+0xd8>)
 8001782:	1dfb      	adds	r3, r7, #7
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	001c      	movs	r4, r3
 8001788:	230f      	movs	r3, #15
 800178a:	4023      	ands	r3, r4
 800178c:	3b08      	subs	r3, #8
 800178e:	089b      	lsrs	r3, r3, #2
 8001790:	430a      	orrs	r2, r1
 8001792:	3306      	adds	r3, #6
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	18c3      	adds	r3, r0, r3
 8001798:	3304      	adds	r3, #4
 800179a:	601a      	str	r2, [r3, #0]
}
 800179c:	46c0      	nop			; (mov r8, r8)
 800179e:	46bd      	mov	sp, r7
 80017a0:	b003      	add	sp, #12
 80017a2:	bd90      	pop	{r4, r7, pc}
 80017a4:	e000e100 	.word	0xe000e100
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	1e5a      	subs	r2, r3, #1
 80017b8:	2380      	movs	r3, #128	; 0x80
 80017ba:	045b      	lsls	r3, r3, #17
 80017bc:	429a      	cmp	r2, r3
 80017be:	d301      	bcc.n	80017c4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017c0:	2301      	movs	r3, #1
 80017c2:	e010      	b.n	80017e6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017c4:	4b0a      	ldr	r3, [pc, #40]	; (80017f0 <SysTick_Config+0x44>)
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	3a01      	subs	r2, #1
 80017ca:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017cc:	2301      	movs	r3, #1
 80017ce:	425b      	negs	r3, r3
 80017d0:	2103      	movs	r1, #3
 80017d2:	0018      	movs	r0, r3
 80017d4:	f7ff ff7c 	bl	80016d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017d8:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <SysTick_Config+0x44>)
 80017da:	2200      	movs	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017de:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <SysTick_Config+0x44>)
 80017e0:	2207      	movs	r2, #7
 80017e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	0018      	movs	r0, r3
 80017e8:	46bd      	mov	sp, r7
 80017ea:	b002      	add	sp, #8
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	46c0      	nop			; (mov r8, r8)
 80017f0:	e000e010 	.word	0xe000e010

080017f4 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60b9      	str	r1, [r7, #8]
 80017fc:	607a      	str	r2, [r7, #4]
 80017fe:	210f      	movs	r1, #15
 8001800:	187b      	adds	r3, r7, r1
 8001802:	1c02      	adds	r2, r0, #0
 8001804:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001806:	68ba      	ldr	r2, [r7, #8]
 8001808:	187b      	adds	r3, r7, r1
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	b25b      	sxtb	r3, r3
 800180e:	0011      	movs	r1, r2
 8001810:	0018      	movs	r0, r3
 8001812:	f7ff ff5d 	bl	80016d0 <__NVIC_SetPriority>
}
 8001816:	46c0      	nop			; (mov r8, r8)
 8001818:	46bd      	mov	sp, r7
 800181a:	b004      	add	sp, #16
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b082      	sub	sp, #8
 8001822:	af00      	add	r7, sp, #0
 8001824:	0002      	movs	r2, r0
 8001826:	1dfb      	adds	r3, r7, #7
 8001828:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800182a:	1dfb      	adds	r3, r7, #7
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	b25b      	sxtb	r3, r3
 8001830:	0018      	movs	r0, r3
 8001832:	f7ff ff33 	bl	800169c <__NVIC_EnableIRQ>
}
 8001836:	46c0      	nop			; (mov r8, r8)
 8001838:	46bd      	mov	sp, r7
 800183a:	b002      	add	sp, #8
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	0018      	movs	r0, r3
 800184a:	f7ff ffaf 	bl	80017ac <SysTick_Config>
 800184e:	0003      	movs	r3, r0
}
 8001850:	0018      	movs	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	b002      	add	sp, #8
 8001856:	bd80      	pop	{r7, pc}

08001858 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001862:	2300      	movs	r3, #0
 8001864:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001866:	e14d      	b.n	8001b04 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2101      	movs	r1, #1
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	4091      	lsls	r1, r2
 8001872:	000a      	movs	r2, r1
 8001874:	4013      	ands	r3, r2
 8001876:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d100      	bne.n	8001880 <HAL_GPIO_Init+0x28>
 800187e:	e13e      	b.n	8001afe <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	2b02      	cmp	r3, #2
 8001886:	d003      	beq.n	8001890 <HAL_GPIO_Init+0x38>
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	2b12      	cmp	r3, #18
 800188e:	d125      	bne.n	80018dc <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	08da      	lsrs	r2, r3, #3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3208      	adds	r2, #8
 8001898:	0092      	lsls	r2, r2, #2
 800189a:	58d3      	ldr	r3, [r2, r3]
 800189c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	2207      	movs	r2, #7
 80018a2:	4013      	ands	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	220f      	movs	r2, #15
 80018a8:	409a      	lsls	r2, r3
 80018aa:	0013      	movs	r3, r2
 80018ac:	43da      	mvns	r2, r3
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	4013      	ands	r3, r2
 80018b2:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	691b      	ldr	r3, [r3, #16]
 80018b8:	220f      	movs	r2, #15
 80018ba:	401a      	ands	r2, r3
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	2107      	movs	r1, #7
 80018c0:	400b      	ands	r3, r1
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	409a      	lsls	r2, r3
 80018c6:	0013      	movs	r3, r2
 80018c8:	697a      	ldr	r2, [r7, #20]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	08da      	lsrs	r2, r3, #3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	3208      	adds	r2, #8
 80018d6:	0092      	lsls	r2, r2, #2
 80018d8:	6979      	ldr	r1, [r7, #20]
 80018da:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	2203      	movs	r2, #3
 80018e8:	409a      	lsls	r2, r3
 80018ea:	0013      	movs	r3, r2
 80018ec:	43da      	mvns	r2, r3
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	4013      	ands	r3, r2
 80018f2:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	2203      	movs	r2, #3
 80018fa:	401a      	ands	r2, r3
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	409a      	lsls	r2, r3
 8001902:	0013      	movs	r3, r2
 8001904:	697a      	ldr	r2, [r7, #20]
 8001906:	4313      	orrs	r3, r2
 8001908:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	697a      	ldr	r2, [r7, #20]
 800190e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d00b      	beq.n	8001930 <HAL_GPIO_Init+0xd8>
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	2b02      	cmp	r3, #2
 800191e:	d007      	beq.n	8001930 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001924:	2b11      	cmp	r3, #17
 8001926:	d003      	beq.n	8001930 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	2b12      	cmp	r3, #18
 800192e:	d130      	bne.n	8001992 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	2203      	movs	r2, #3
 800193c:	409a      	lsls	r2, r3
 800193e:	0013      	movs	r3, r2
 8001940:	43da      	mvns	r2, r3
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	4013      	ands	r3, r2
 8001946:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	68da      	ldr	r2, [r3, #12]
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	409a      	lsls	r2, r3
 8001952:	0013      	movs	r3, r2
 8001954:	697a      	ldr	r2, [r7, #20]
 8001956:	4313      	orrs	r3, r2
 8001958:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	697a      	ldr	r2, [r7, #20]
 800195e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001966:	2201      	movs	r2, #1
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	409a      	lsls	r2, r3
 800196c:	0013      	movs	r3, r2
 800196e:	43da      	mvns	r2, r3
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	4013      	ands	r3, r2
 8001974:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	091b      	lsrs	r3, r3, #4
 800197c:	2201      	movs	r2, #1
 800197e:	401a      	ands	r2, r3
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	409a      	lsls	r2, r3
 8001984:	0013      	movs	r3, r2
 8001986:	697a      	ldr	r2, [r7, #20]
 8001988:	4313      	orrs	r3, r2
 800198a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	697a      	ldr	r2, [r7, #20]
 8001990:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b03      	cmp	r3, #3
 8001998:	d017      	beq.n	80019ca <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	2203      	movs	r2, #3
 80019a6:	409a      	lsls	r2, r3
 80019a8:	0013      	movs	r3, r2
 80019aa:	43da      	mvns	r2, r3
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	4013      	ands	r3, r2
 80019b0:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	689a      	ldr	r2, [r3, #8]
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	409a      	lsls	r2, r3
 80019bc:	0013      	movs	r3, r2
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685a      	ldr	r2, [r3, #4]
 80019ce:	2380      	movs	r3, #128	; 0x80
 80019d0:	055b      	lsls	r3, r3, #21
 80019d2:	4013      	ands	r3, r2
 80019d4:	d100      	bne.n	80019d8 <HAL_GPIO_Init+0x180>
 80019d6:	e092      	b.n	8001afe <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80019d8:	4a50      	ldr	r2, [pc, #320]	; (8001b1c <HAL_GPIO_Init+0x2c4>)
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	089b      	lsrs	r3, r3, #2
 80019de:	3318      	adds	r3, #24
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	589b      	ldr	r3, [r3, r2]
 80019e4:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	2203      	movs	r2, #3
 80019ea:	4013      	ands	r3, r2
 80019ec:	00db      	lsls	r3, r3, #3
 80019ee:	220f      	movs	r2, #15
 80019f0:	409a      	lsls	r2, r3
 80019f2:	0013      	movs	r3, r2
 80019f4:	43da      	mvns	r2, r3
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	4013      	ands	r3, r2
 80019fa:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	23a0      	movs	r3, #160	; 0xa0
 8001a00:	05db      	lsls	r3, r3, #23
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d013      	beq.n	8001a2e <HAL_GPIO_Init+0x1d6>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a45      	ldr	r2, [pc, #276]	; (8001b20 <HAL_GPIO_Init+0x2c8>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d00d      	beq.n	8001a2a <HAL_GPIO_Init+0x1d2>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a44      	ldr	r2, [pc, #272]	; (8001b24 <HAL_GPIO_Init+0x2cc>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d007      	beq.n	8001a26 <HAL_GPIO_Init+0x1ce>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a43      	ldr	r2, [pc, #268]	; (8001b28 <HAL_GPIO_Init+0x2d0>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d101      	bne.n	8001a22 <HAL_GPIO_Init+0x1ca>
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e006      	b.n	8001a30 <HAL_GPIO_Init+0x1d8>
 8001a22:	2305      	movs	r3, #5
 8001a24:	e004      	b.n	8001a30 <HAL_GPIO_Init+0x1d8>
 8001a26:	2302      	movs	r3, #2
 8001a28:	e002      	b.n	8001a30 <HAL_GPIO_Init+0x1d8>
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e000      	b.n	8001a30 <HAL_GPIO_Init+0x1d8>
 8001a2e:	2300      	movs	r3, #0
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	2103      	movs	r1, #3
 8001a34:	400a      	ands	r2, r1
 8001a36:	00d2      	lsls	r2, r2, #3
 8001a38:	4093      	lsls	r3, r2
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001a40:	4936      	ldr	r1, [pc, #216]	; (8001b1c <HAL_GPIO_Init+0x2c4>)
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	089b      	lsrs	r3, r3, #2
 8001a46:	3318      	adds	r3, #24
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001a4e:	4a33      	ldr	r2, [pc, #204]	; (8001b1c <HAL_GPIO_Init+0x2c4>)
 8001a50:	2380      	movs	r3, #128	; 0x80
 8001a52:	58d3      	ldr	r3, [r2, r3]
 8001a54:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	43da      	mvns	r2, r3
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685a      	ldr	r2, [r3, #4]
 8001a64:	2380      	movs	r3, #128	; 0x80
 8001a66:	025b      	lsls	r3, r3, #9
 8001a68:	4013      	ands	r3, r2
 8001a6a:	d003      	beq.n	8001a74 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8001a6c:	697a      	ldr	r2, [r7, #20]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001a74:	4929      	ldr	r1, [pc, #164]	; (8001b1c <HAL_GPIO_Init+0x2c4>)
 8001a76:	2280      	movs	r2, #128	; 0x80
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001a7c:	4a27      	ldr	r2, [pc, #156]	; (8001b1c <HAL_GPIO_Init+0x2c4>)
 8001a7e:	2384      	movs	r3, #132	; 0x84
 8001a80:	58d3      	ldr	r3, [r2, r3]
 8001a82:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	43da      	mvns	r2, r3
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685a      	ldr	r2, [r3, #4]
 8001a92:	2380      	movs	r3, #128	; 0x80
 8001a94:	029b      	lsls	r3, r3, #10
 8001a96:	4013      	ands	r3, r2
 8001a98:	d003      	beq.n	8001aa2 <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001aa2:	491e      	ldr	r1, [pc, #120]	; (8001b1c <HAL_GPIO_Init+0x2c4>)
 8001aa4:	2284      	movs	r2, #132	; 0x84
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001aaa:	4b1c      	ldr	r3, [pc, #112]	; (8001b1c <HAL_GPIO_Init+0x2c4>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	43da      	mvns	r2, r3
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685a      	ldr	r2, [r3, #4]
 8001abe:	2380      	movs	r3, #128	; 0x80
 8001ac0:	035b      	lsls	r3, r3, #13
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	d003      	beq.n	8001ace <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8001ac6:	697a      	ldr	r2, [r7, #20]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001ace:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <HAL_GPIO_Init+0x2c4>)
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8001ad4:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <HAL_GPIO_Init+0x2c4>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	43da      	mvns	r2, r3
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	2380      	movs	r3, #128	; 0x80
 8001aea:	039b      	lsls	r3, r3, #14
 8001aec:	4013      	ands	r3, r2
 8001aee:	d003      	beq.n	8001af8 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8001af0:	697a      	ldr	r2, [r7, #20]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001af8:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <HAL_GPIO_Init+0x2c4>)
 8001afa:	697a      	ldr	r2, [r7, #20]
 8001afc:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	3301      	adds	r3, #1
 8001b02:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	40da      	lsrs	r2, r3
 8001b0c:	1e13      	subs	r3, r2, #0
 8001b0e:	d000      	beq.n	8001b12 <HAL_GPIO_Init+0x2ba>
 8001b10:	e6aa      	b.n	8001868 <HAL_GPIO_Init+0x10>
  }
}
 8001b12:	46c0      	nop			; (mov r8, r8)
 8001b14:	46c0      	nop			; (mov r8, r8)
 8001b16:	46bd      	mov	sp, r7
 8001b18:	b006      	add	sp, #24
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40021800 	.word	0x40021800
 8001b20:	50000400 	.word	0x50000400
 8001b24:	50000800 	.word	0x50000800
 8001b28:	50001400 	.word	0x50001400

08001b2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	0008      	movs	r0, r1
 8001b36:	0011      	movs	r1, r2
 8001b38:	1cbb      	adds	r3, r7, #2
 8001b3a:	1c02      	adds	r2, r0, #0
 8001b3c:	801a      	strh	r2, [r3, #0]
 8001b3e:	1c7b      	adds	r3, r7, #1
 8001b40:	1c0a      	adds	r2, r1, #0
 8001b42:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b44:	1c7b      	adds	r3, r7, #1
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d004      	beq.n	8001b56 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b4c:	1cbb      	adds	r3, r7, #2
 8001b4e:	881a      	ldrh	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b54:	e003      	b.n	8001b5e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b56:	1cbb      	adds	r3, r7, #2
 8001b58:	881a      	ldrh	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b5e:	46c0      	nop			; (mov r8, r8)
 8001b60:	46bd      	mov	sp, r7
 8001b62:	b002      	add	sp, #8
 8001b64:	bd80      	pop	{r7, pc}
	...

08001b68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	0002      	movs	r2, r0
 8001b70:	1dbb      	adds	r3, r7, #6
 8001b72:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8001b74:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	1dba      	adds	r2, r7, #6
 8001b7a:	8812      	ldrh	r2, [r2, #0]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	d008      	beq.n	8001b92 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001b80:	4b0d      	ldr	r3, [pc, #52]	; (8001bb8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001b82:	1dba      	adds	r2, r7, #6
 8001b84:	8812      	ldrh	r2, [r2, #0]
 8001b86:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001b88:	1dbb      	adds	r3, r7, #6
 8001b8a:	881b      	ldrh	r3, [r3, #0]
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	f7fe fe41 	bl	8000814 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8001b92:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	1dba      	adds	r2, r7, #6
 8001b98:	8812      	ldrh	r2, [r2, #0]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	d008      	beq.n	8001bb0 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001b9e:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001ba0:	1dba      	adds	r2, r7, #6
 8001ba2:	8812      	ldrh	r2, [r2, #0]
 8001ba4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001ba6:	1dbb      	adds	r3, r7, #6
 8001ba8:	881b      	ldrh	r3, [r3, #0]
 8001baa:	0018      	movs	r0, r3
 8001bac:	f000 f806 	bl	8001bbc <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001bb0:	46c0      	nop			; (mov r8, r8)
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	b002      	add	sp, #8
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40021800 	.word	0x40021800

08001bbc <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	0002      	movs	r2, r0
 8001bc4:	1dbb      	adds	r3, r7, #6
 8001bc6:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001bc8:	46c0      	nop			; (mov r8, r8)
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	b002      	add	sp, #8
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e1e5      	b.n	8001fae <HAL_RCC_OscConfig+0x3de>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2201      	movs	r2, #1
 8001be8:	4013      	ands	r3, r2
 8001bea:	d100      	bne.n	8001bee <HAL_RCC_OscConfig+0x1e>
 8001bec:	e06f      	b.n	8001cce <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bee:	4bc4      	ldr	r3, [pc, #784]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	2238      	movs	r2, #56	; 0x38
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	2b08      	cmp	r3, #8
 8001bfc:	d10b      	bne.n	8001c16 <HAL_RCC_OscConfig+0x46>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bfe:	4bc0      	ldr	r3, [pc, #768]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	2380      	movs	r3, #128	; 0x80
 8001c04:	029b      	lsls	r3, r3, #10
 8001c06:	4013      	ands	r3, r2
 8001c08:	d061      	beq.n	8001cce <HAL_RCC_OscConfig+0xfe>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d15d      	bne.n	8001cce <HAL_RCC_OscConfig+0xfe>
      {
        return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e1cb      	b.n	8001fae <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685a      	ldr	r2, [r3, #4]
 8001c1a:	2380      	movs	r3, #128	; 0x80
 8001c1c:	025b      	lsls	r3, r3, #9
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d107      	bne.n	8001c32 <HAL_RCC_OscConfig+0x62>
 8001c22:	4bb7      	ldr	r3, [pc, #732]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	4bb6      	ldr	r3, [pc, #728]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001c28:	2180      	movs	r1, #128	; 0x80
 8001c2a:	0249      	lsls	r1, r1, #9
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	e020      	b.n	8001c74 <HAL_RCC_OscConfig+0xa4>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685a      	ldr	r2, [r3, #4]
 8001c36:	23a0      	movs	r3, #160	; 0xa0
 8001c38:	02db      	lsls	r3, r3, #11
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d10e      	bne.n	8001c5c <HAL_RCC_OscConfig+0x8c>
 8001c3e:	4bb0      	ldr	r3, [pc, #704]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	4baf      	ldr	r3, [pc, #700]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001c44:	2180      	movs	r1, #128	; 0x80
 8001c46:	02c9      	lsls	r1, r1, #11
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	4bac      	ldr	r3, [pc, #688]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	4bab      	ldr	r3, [pc, #684]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001c52:	2180      	movs	r1, #128	; 0x80
 8001c54:	0249      	lsls	r1, r1, #9
 8001c56:	430a      	orrs	r2, r1
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	e00b      	b.n	8001c74 <HAL_RCC_OscConfig+0xa4>
 8001c5c:	4ba8      	ldr	r3, [pc, #672]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	4ba7      	ldr	r3, [pc, #668]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001c62:	49a8      	ldr	r1, [pc, #672]	; (8001f04 <HAL_RCC_OscConfig+0x334>)
 8001c64:	400a      	ands	r2, r1
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	4ba5      	ldr	r3, [pc, #660]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4ba4      	ldr	r3, [pc, #656]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001c6e:	49a6      	ldr	r1, [pc, #664]	; (8001f08 <HAL_RCC_OscConfig+0x338>)
 8001c70:	400a      	ands	r2, r1
 8001c72:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d014      	beq.n	8001ca6 <HAL_RCC_OscConfig+0xd6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7c:	f7fe ff3c 	bl	8000af8 <HAL_GetTick>
 8001c80:	0003      	movs	r3, r0
 8001c82:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_OscConfig+0xc8>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c86:	f7fe ff37 	bl	8000af8 <HAL_GetTick>
 8001c8a:	0002      	movs	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b64      	cmp	r3, #100	; 0x64
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0xc8>
          {
            return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e18a      	b.n	8001fae <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c98:	4b99      	ldr	r3, [pc, #612]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	2380      	movs	r3, #128	; 0x80
 8001c9e:	029b      	lsls	r3, r3, #10
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	d0f0      	beq.n	8001c86 <HAL_RCC_OscConfig+0xb6>
 8001ca4:	e013      	b.n	8001cce <HAL_RCC_OscConfig+0xfe>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca6:	f7fe ff27 	bl	8000af8 <HAL_GetTick>
 8001caa:	0003      	movs	r3, r0
 8001cac:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cb0:	f7fe ff22 	bl	8000af8 <HAL_GetTick>
 8001cb4:	0002      	movs	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b64      	cmp	r3, #100	; 0x64
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e175      	b.n	8001fae <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cc2:	4b8f      	ldr	r3, [pc, #572]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	2380      	movs	r3, #128	; 0x80
 8001cc8:	029b      	lsls	r3, r3, #10
 8001cca:	4013      	ands	r3, r2
 8001ccc:	d1f0      	bne.n	8001cb0 <HAL_RCC_OscConfig+0xe0>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	d100      	bne.n	8001cda <HAL_RCC_OscConfig+0x10a>
 8001cd8:	e08c      	b.n	8001df4 <HAL_RCC_OscConfig+0x224>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cda:	4b89      	ldr	r3, [pc, #548]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	2238      	movs	r2, #56	; 0x38
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d135      	bne.n	8001d56 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cea:	4b85      	ldr	r3, [pc, #532]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	2380      	movs	r3, #128	; 0x80
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	d005      	beq.n	8001d02 <HAL_RCC_OscConfig+0x132>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e155      	b.n	8001fae <HAL_RCC_OscConfig+0x3de>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d02:	4b7f      	ldr	r3, [pc, #508]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	4a81      	ldr	r2, [pc, #516]	; (8001f0c <HAL_RCC_OscConfig+0x33c>)
 8001d08:	4013      	ands	r3, r2
 8001d0a:	0019      	movs	r1, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	695b      	ldr	r3, [r3, #20]
 8001d10:	021a      	lsls	r2, r3, #8
 8001d12:	4b7b      	ldr	r3, [pc, #492]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001d14:	430a      	orrs	r2, r1
 8001d16:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d112      	bne.n	8001d44 <HAL_RCC_OscConfig+0x174>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001d1e:	4b78      	ldr	r3, [pc, #480]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a7b      	ldr	r2, [pc, #492]	; (8001f10 <HAL_RCC_OscConfig+0x340>)
 8001d24:	4013      	ands	r3, r2
 8001d26:	0019      	movs	r1, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	691a      	ldr	r2, [r3, #16]
 8001d2c:	4b74      	ldr	r3, [pc, #464]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001d32:	4b73      	ldr	r3, [pc, #460]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	0adb      	lsrs	r3, r3, #11
 8001d38:	2207      	movs	r2, #7
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	4a75      	ldr	r2, [pc, #468]	; (8001f14 <HAL_RCC_OscConfig+0x344>)
 8001d3e:	40da      	lsrs	r2, r3
 8001d40:	4b75      	ldr	r3, [pc, #468]	; (8001f18 <HAL_RCC_OscConfig+0x348>)
 8001d42:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d44:	4b75      	ldr	r3, [pc, #468]	; (8001f1c <HAL_RCC_OscConfig+0x34c>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	0018      	movs	r0, r3
 8001d4a:	f7fe fe7b 	bl	8000a44 <HAL_InitTick>
 8001d4e:	1e03      	subs	r3, r0, #0
 8001d50:	d050      	beq.n	8001df4 <HAL_RCC_OscConfig+0x224>
        {
          return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e12b      	b.n	8001fae <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d030      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x1f0>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001d5e:	4b68      	ldr	r3, [pc, #416]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a6b      	ldr	r2, [pc, #428]	; (8001f10 <HAL_RCC_OscConfig+0x340>)
 8001d64:	4013      	ands	r3, r2
 8001d66:	0019      	movs	r1, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	691a      	ldr	r2, [r3, #16]
 8001d6c:	4b64      	ldr	r3, [pc, #400]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8001d72:	4b63      	ldr	r3, [pc, #396]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	4b62      	ldr	r3, [pc, #392]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001d78:	2180      	movs	r1, #128	; 0x80
 8001d7a:	0049      	lsls	r1, r1, #1
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d80:	f7fe feba 	bl	8000af8 <HAL_GetTick>
 8001d84:	0003      	movs	r3, r0
 8001d86:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d88:	e008      	b.n	8001d9c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d8a:	f7fe feb5 	bl	8000af8 <HAL_GetTick>
 8001d8e:	0002      	movs	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d901      	bls.n	8001d9c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e108      	b.n	8001fae <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d9c:	4b58      	ldr	r3, [pc, #352]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	2380      	movs	r3, #128	; 0x80
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	4013      	ands	r3, r2
 8001da6:	d0f0      	beq.n	8001d8a <HAL_RCC_OscConfig+0x1ba>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da8:	4b55      	ldr	r3, [pc, #340]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	4a57      	ldr	r2, [pc, #348]	; (8001f0c <HAL_RCC_OscConfig+0x33c>)
 8001dae:	4013      	ands	r3, r2
 8001db0:	0019      	movs	r1, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	021a      	lsls	r2, r3, #8
 8001db8:	4b51      	ldr	r3, [pc, #324]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	e019      	b.n	8001df4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8001dc0:	4b4f      	ldr	r3, [pc, #316]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	4b4e      	ldr	r3, [pc, #312]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001dc6:	4956      	ldr	r1, [pc, #344]	; (8001f20 <HAL_RCC_OscConfig+0x350>)
 8001dc8:	400a      	ands	r2, r1
 8001dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dcc:	f7fe fe94 	bl	8000af8 <HAL_GetTick>
 8001dd0:	0003      	movs	r3, r0
 8001dd2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dd4:	e008      	b.n	8001de8 <HAL_RCC_OscConfig+0x218>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dd6:	f7fe fe8f 	bl	8000af8 <HAL_GetTick>
 8001dda:	0002      	movs	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x218>
          {
            return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e0e2      	b.n	8001fae <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001de8:	4b45      	ldr	r3, [pc, #276]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	2380      	movs	r3, #128	; 0x80
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	4013      	ands	r3, r2
 8001df2:	d1f0      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x206>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2208      	movs	r2, #8
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	d047      	beq.n	8001e8e <HAL_RCC_OscConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001dfe:	4b40      	ldr	r3, [pc, #256]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	2238      	movs	r2, #56	; 0x38
 8001e04:	4013      	ands	r3, r2
 8001e06:	2b18      	cmp	r3, #24
 8001e08:	d10a      	bne.n	8001e20 <HAL_RCC_OscConfig+0x250>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR2) & RCC_CSR2_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001e0a:	4b3d      	ldr	r3, [pc, #244]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001e0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e0e:	2202      	movs	r2, #2
 8001e10:	4013      	ands	r3, r2
 8001e12:	d03c      	beq.n	8001e8e <HAL_RCC_OscConfig+0x2be>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d138      	bne.n	8001e8e <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e0c6      	b.n	8001fae <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d019      	beq.n	8001e5c <HAL_RCC_OscConfig+0x28c>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001e28:	4b35      	ldr	r3, [pc, #212]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001e2a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e2c:	4b34      	ldr	r3, [pc, #208]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001e2e:	2101      	movs	r1, #1
 8001e30:	430a      	orrs	r2, r1
 8001e32:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e34:	f7fe fe60 	bl	8000af8 <HAL_GetTick>
 8001e38:	0003      	movs	r3, r0
 8001e3a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001e3c:	e008      	b.n	8001e50 <HAL_RCC_OscConfig+0x280>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e3e:	f7fe fe5b 	bl	8000af8 <HAL_GetTick>
 8001e42:	0002      	movs	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e0ae      	b.n	8001fae <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001e50:	4b2b      	ldr	r3, [pc, #172]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001e52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e54:	2202      	movs	r2, #2
 8001e56:	4013      	ands	r3, r2
 8001e58:	d0f1      	beq.n	8001e3e <HAL_RCC_OscConfig+0x26e>
 8001e5a:	e018      	b.n	8001e8e <HAL_RCC_OscConfig+0x2be>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001e5c:	4b28      	ldr	r3, [pc, #160]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001e5e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e60:	4b27      	ldr	r3, [pc, #156]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001e62:	2101      	movs	r1, #1
 8001e64:	438a      	bics	r2, r1
 8001e66:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e68:	f7fe fe46 	bl	8000af8 <HAL_GetTick>
 8001e6c:	0003      	movs	r3, r0
 8001e6e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001e70:	e008      	b.n	8001e84 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e72:	f7fe fe41 	bl	8000af8 <HAL_GetTick>
 8001e76:	0002      	movs	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e094      	b.n	8001fae <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001e84:	4b1e      	ldr	r3, [pc, #120]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001e86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e88:	2202      	movs	r2, #2
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	d1f1      	bne.n	8001e72 <HAL_RCC_OscConfig+0x2a2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2204      	movs	r2, #4
 8001e94:	4013      	ands	r3, r2
 8001e96:	d100      	bne.n	8001e9a <HAL_RCC_OscConfig+0x2ca>
 8001e98:	e088      	b.n	8001fac <HAL_RCC_OscConfig+0x3dc>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e9a:	230f      	movs	r3, #15
 8001e9c:	18fb      	adds	r3, r7, r3
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001ea2:	4b17      	ldr	r3, [pc, #92]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	2238      	movs	r2, #56	; 0x38
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	2b20      	cmp	r3, #32
 8001eac:	d10c      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x2f8>
    {
      if ((((RCC->CSR1) & RCC_CSR1_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001eae:	4b14      	ldr	r3, [pc, #80]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb2:	2202      	movs	r2, #2
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	d100      	bne.n	8001eba <HAL_RCC_OscConfig+0x2ea>
 8001eb8:	e078      	b.n	8001fac <HAL_RCC_OscConfig+0x3dc>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d000      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x2f4>
 8001ec2:	e073      	b.n	8001fac <HAL_RCC_OscConfig+0x3dc>
      {
        return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e072      	b.n	8001fae <HAL_RCC_OscConfig+0x3de>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d106      	bne.n	8001ede <HAL_RCC_OscConfig+0x30e>
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001ed2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ed4:	4b0a      	ldr	r3, [pc, #40]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	65da      	str	r2, [r3, #92]	; 0x5c
 8001edc:	e02e      	b.n	8001f3c <HAL_RCC_OscConfig+0x36c>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	2b05      	cmp	r3, #5
 8001ee4:	d11e      	bne.n	8001f24 <HAL_RCC_OscConfig+0x354>
 8001ee6:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001ee8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001eea:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001eec:	2104      	movs	r1, #4
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ef2:	4b03      	ldr	r3, [pc, #12]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001ef4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ef6:	4b02      	ldr	r3, [pc, #8]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001ef8:	2101      	movs	r1, #1
 8001efa:	430a      	orrs	r2, r1
 8001efc:	65da      	str	r2, [r3, #92]	; 0x5c
 8001efe:	e01d      	b.n	8001f3c <HAL_RCC_OscConfig+0x36c>
 8001f00:	40021000 	.word	0x40021000
 8001f04:	fffeffff 	.word	0xfffeffff
 8001f08:	fffbffff 	.word	0xfffbffff
 8001f0c:	ffff80ff 	.word	0xffff80ff
 8001f10:	ffffc7ff 	.word	0xffffc7ff
 8001f14:	02dc6c00 	.word	0x02dc6c00
 8001f18:	20000000 	.word	0x20000000
 8001f1c:	20000004 	.word	0x20000004
 8001f20:	fffffeff 	.word	0xfffffeff
 8001f24:	4b24      	ldr	r3, [pc, #144]	; (8001fb8 <HAL_RCC_OscConfig+0x3e8>)
 8001f26:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f28:	4b23      	ldr	r3, [pc, #140]	; (8001fb8 <HAL_RCC_OscConfig+0x3e8>)
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	438a      	bics	r2, r1
 8001f2e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001f30:	4b21      	ldr	r3, [pc, #132]	; (8001fb8 <HAL_RCC_OscConfig+0x3e8>)
 8001f32:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f34:	4b20      	ldr	r3, [pc, #128]	; (8001fb8 <HAL_RCC_OscConfig+0x3e8>)
 8001f36:	2104      	movs	r1, #4
 8001f38:	438a      	bics	r2, r1
 8001f3a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d014      	beq.n	8001f6e <HAL_RCC_OscConfig+0x39e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f44:	f7fe fdd8 	bl	8000af8 <HAL_GetTick>
 8001f48:	0003      	movs	r3, r0
 8001f4a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001f4c:	e009      	b.n	8001f62 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f4e:	f7fe fdd3 	bl	8000af8 <HAL_GetTick>
 8001f52:	0002      	movs	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	4a18      	ldr	r2, [pc, #96]	; (8001fbc <HAL_RCC_OscConfig+0x3ec>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e025      	b.n	8001fae <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001f62:	4b15      	ldr	r3, [pc, #84]	; (8001fb8 <HAL_RCC_OscConfig+0x3e8>)
 8001f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f66:	2202      	movs	r2, #2
 8001f68:	4013      	ands	r3, r2
 8001f6a:	d0f0      	beq.n	8001f4e <HAL_RCC_OscConfig+0x37e>
 8001f6c:	e013      	b.n	8001f96 <HAL_RCC_OscConfig+0x3c6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f6e:	f7fe fdc3 	bl	8000af8 <HAL_GetTick>
 8001f72:	0003      	movs	r3, r0
 8001f74:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001f76:	e009      	b.n	8001f8c <HAL_RCC_OscConfig+0x3bc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f78:	f7fe fdbe 	bl	8000af8 <HAL_GetTick>
 8001f7c:	0002      	movs	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	4a0e      	ldr	r2, [pc, #56]	; (8001fbc <HAL_RCC_OscConfig+0x3ec>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e010      	b.n	8001fae <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001f8c:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <HAL_RCC_OscConfig+0x3e8>)
 8001f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f90:	2202      	movs	r2, #2
 8001f92:	4013      	ands	r3, r2
 8001f94:	d1f0      	bne.n	8001f78 <HAL_RCC_OscConfig+0x3a8>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001f96:	230f      	movs	r3, #15
 8001f98:	18fb      	adds	r3, r7, r3
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d105      	bne.n	8001fac <HAL_RCC_OscConfig+0x3dc>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001fa0:	4b05      	ldr	r3, [pc, #20]	; (8001fb8 <HAL_RCC_OscConfig+0x3e8>)
 8001fa2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fa4:	4b04      	ldr	r3, [pc, #16]	; (8001fb8 <HAL_RCC_OscConfig+0x3e8>)
 8001fa6:	4906      	ldr	r1, [pc, #24]	; (8001fc0 <HAL_RCC_OscConfig+0x3f0>)
 8001fa8:	400a      	ands	r2, r1
 8001faa:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	0018      	movs	r0, r3
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	b006      	add	sp, #24
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	46c0      	nop			; (mov r8, r8)
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	00001388 	.word	0x00001388
 8001fc0:	efffffff 	.word	0xefffffff

08001fc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d101      	bne.n	8001fd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e0e9      	b.n	80021ac <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fd8:	4b76      	ldr	r3, [pc, #472]	; (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2207      	movs	r2, #7
 8001fde:	4013      	ands	r3, r2
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d91e      	bls.n	8002024 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fe6:	4b73      	ldr	r3, [pc, #460]	; (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2207      	movs	r2, #7
 8001fec:	4393      	bics	r3, r2
 8001fee:	0019      	movs	r1, r3
 8001ff0:	4b70      	ldr	r3, [pc, #448]	; (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ff8:	f7fe fd7e 	bl	8000af8 <HAL_GetTick>
 8001ffc:	0003      	movs	r3, r0
 8001ffe:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002000:	e009      	b.n	8002016 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002002:	f7fe fd79 	bl	8000af8 <HAL_GetTick>
 8002006:	0002      	movs	r2, r0
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	4a6a      	ldr	r2, [pc, #424]	; (80021b8 <HAL_RCC_ClockConfig+0x1f4>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e0ca      	b.n	80021ac <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002016:	4b67      	ldr	r3, [pc, #412]	; (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2207      	movs	r2, #7
 800201c:	4013      	ands	r3, r2
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	429a      	cmp	r2, r3
 8002022:	d1ee      	bne.n	8002002 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2202      	movs	r2, #2
 800202a:	4013      	ands	r3, r2
 800202c:	d017      	beq.n	800205e <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2204      	movs	r2, #4
 8002034:	4013      	ands	r3, r2
 8002036:	d008      	beq.n	800204a <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002038:	4b60      	ldr	r3, [pc, #384]	; (80021bc <HAL_RCC_ClockConfig+0x1f8>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	4a60      	ldr	r2, [pc, #384]	; (80021c0 <HAL_RCC_ClockConfig+0x1fc>)
 800203e:	401a      	ands	r2, r3
 8002040:	4b5e      	ldr	r3, [pc, #376]	; (80021bc <HAL_RCC_ClockConfig+0x1f8>)
 8002042:	21b0      	movs	r1, #176	; 0xb0
 8002044:	0109      	lsls	r1, r1, #4
 8002046:	430a      	orrs	r2, r1
 8002048:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800204a:	4b5c      	ldr	r3, [pc, #368]	; (80021bc <HAL_RCC_ClockConfig+0x1f8>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	4a5d      	ldr	r2, [pc, #372]	; (80021c4 <HAL_RCC_ClockConfig+0x200>)
 8002050:	4013      	ands	r3, r2
 8002052:	0019      	movs	r1, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	68da      	ldr	r2, [r3, #12]
 8002058:	4b58      	ldr	r3, [pc, #352]	; (80021bc <HAL_RCC_ClockConfig+0x1f8>)
 800205a:	430a      	orrs	r2, r1
 800205c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2201      	movs	r2, #1
 8002064:	4013      	ands	r3, r2
 8002066:	d055      	beq.n	8002114 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8002068:	4b54      	ldr	r3, [pc, #336]	; (80021bc <HAL_RCC_ClockConfig+0x1f8>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	221c      	movs	r2, #28
 800206e:	4393      	bics	r3, r2
 8002070:	0019      	movs	r1, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689a      	ldr	r2, [r3, #8]
 8002076:	4b51      	ldr	r3, [pc, #324]	; (80021bc <HAL_RCC_ClockConfig+0x1f8>)
 8002078:	430a      	orrs	r2, r1
 800207a:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d107      	bne.n	8002094 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002084:	4b4d      	ldr	r3, [pc, #308]	; (80021bc <HAL_RCC_ClockConfig+0x1f8>)
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	2380      	movs	r3, #128	; 0x80
 800208a:	029b      	lsls	r3, r3, #10
 800208c:	4013      	ands	r3, r2
 800208e:	d11f      	bne.n	80020d0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e08b      	b.n	80021ac <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d107      	bne.n	80020ac <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800209c:	4b47      	ldr	r3, [pc, #284]	; (80021bc <HAL_RCC_ClockConfig+0x1f8>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	2380      	movs	r3, #128	; 0x80
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	4013      	ands	r3, r2
 80020a6:	d113      	bne.n	80020d0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e07f      	b.n	80021ac <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	2b03      	cmp	r3, #3
 80020b2:	d106      	bne.n	80020c2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80020b4:	4b41      	ldr	r3, [pc, #260]	; (80021bc <HAL_RCC_ClockConfig+0x1f8>)
 80020b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020b8:	2202      	movs	r2, #2
 80020ba:	4013      	ands	r3, r2
 80020bc:	d108      	bne.n	80020d0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e074      	b.n	80021ac <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80020c2:	4b3e      	ldr	r3, [pc, #248]	; (80021bc <HAL_RCC_ClockConfig+0x1f8>)
 80020c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c6:	2202      	movs	r2, #2
 80020c8:	4013      	ands	r3, r2
 80020ca:	d101      	bne.n	80020d0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e06d      	b.n	80021ac <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020d0:	4b3a      	ldr	r3, [pc, #232]	; (80021bc <HAL_RCC_ClockConfig+0x1f8>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	2207      	movs	r2, #7
 80020d6:	4393      	bics	r3, r2
 80020d8:	0019      	movs	r1, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685a      	ldr	r2, [r3, #4]
 80020de:	4b37      	ldr	r3, [pc, #220]	; (80021bc <HAL_RCC_ClockConfig+0x1f8>)
 80020e0:	430a      	orrs	r2, r1
 80020e2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020e4:	f7fe fd08 	bl	8000af8 <HAL_GetTick>
 80020e8:	0003      	movs	r3, r0
 80020ea:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ec:	e009      	b.n	8002102 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ee:	f7fe fd03 	bl	8000af8 <HAL_GetTick>
 80020f2:	0002      	movs	r2, r0
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	4a2f      	ldr	r2, [pc, #188]	; (80021b8 <HAL_RCC_ClockConfig+0x1f4>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e054      	b.n	80021ac <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002102:	4b2e      	ldr	r3, [pc, #184]	; (80021bc <HAL_RCC_ClockConfig+0x1f8>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	2238      	movs	r2, #56	; 0x38
 8002108:	401a      	ands	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	429a      	cmp	r2, r3
 8002112:	d1ec      	bne.n	80020ee <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002114:	4b27      	ldr	r3, [pc, #156]	; (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2207      	movs	r2, #7
 800211a:	4013      	ands	r3, r2
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	429a      	cmp	r2, r3
 8002120:	d21e      	bcs.n	8002160 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002122:	4b24      	ldr	r3, [pc, #144]	; (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2207      	movs	r2, #7
 8002128:	4393      	bics	r3, r2
 800212a:	0019      	movs	r1, r3
 800212c:	4b21      	ldr	r3, [pc, #132]	; (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	430a      	orrs	r2, r1
 8002132:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002134:	f7fe fce0 	bl	8000af8 <HAL_GetTick>
 8002138:	0003      	movs	r3, r0
 800213a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800213c:	e009      	b.n	8002152 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800213e:	f7fe fcdb 	bl	8000af8 <HAL_GetTick>
 8002142:	0002      	movs	r2, r0
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	4a1b      	ldr	r2, [pc, #108]	; (80021b8 <HAL_RCC_ClockConfig+0x1f4>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e02c      	b.n	80021ac <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002152:	4b18      	ldr	r3, [pc, #96]	; (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2207      	movs	r2, #7
 8002158:	4013      	ands	r3, r2
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	429a      	cmp	r2, r3
 800215e:	d1ee      	bne.n	800213e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2204      	movs	r2, #4
 8002166:	4013      	ands	r3, r2
 8002168:	d009      	beq.n	800217e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800216a:	4b14      	ldr	r3, [pc, #80]	; (80021bc <HAL_RCC_ClockConfig+0x1f8>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	4a16      	ldr	r2, [pc, #88]	; (80021c8 <HAL_RCC_ClockConfig+0x204>)
 8002170:	4013      	ands	r3, r2
 8002172:	0019      	movs	r1, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	691a      	ldr	r2, [r3, #16]
 8002178:	4b10      	ldr	r3, [pc, #64]	; (80021bc <HAL_RCC_ClockConfig+0x1f8>)
 800217a:	430a      	orrs	r2, r1
 800217c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800217e:	f000 f82b 	bl	80021d8 <HAL_RCC_GetSysClockFreq>
 8002182:	0001      	movs	r1, r0
 8002184:	4b0d      	ldr	r3, [pc, #52]	; (80021bc <HAL_RCC_ClockConfig+0x1f8>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	0a1b      	lsrs	r3, r3, #8
 800218a:	220f      	movs	r2, #15
 800218c:	401a      	ands	r2, r3
 800218e:	4b0f      	ldr	r3, [pc, #60]	; (80021cc <HAL_RCC_ClockConfig+0x208>)
 8002190:	0092      	lsls	r2, r2, #2
 8002192:	58d3      	ldr	r3, [r2, r3]
 8002194:	221f      	movs	r2, #31
 8002196:	4013      	ands	r3, r2
 8002198:	000a      	movs	r2, r1
 800219a:	40da      	lsrs	r2, r3
 800219c:	4b0c      	ldr	r3, [pc, #48]	; (80021d0 <HAL_RCC_ClockConfig+0x20c>)
 800219e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80021a0:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <HAL_RCC_ClockConfig+0x210>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	0018      	movs	r0, r3
 80021a6:	f7fe fc4d 	bl	8000a44 <HAL_InitTick>
 80021aa:	0003      	movs	r3, r0
}
 80021ac:	0018      	movs	r0, r3
 80021ae:	46bd      	mov	sp, r7
 80021b0:	b004      	add	sp, #16
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40022000 	.word	0x40022000
 80021b8:	00001388 	.word	0x00001388
 80021bc:	40021000 	.word	0x40021000
 80021c0:	ffff84ff 	.word	0xffff84ff
 80021c4:	fffff0ff 	.word	0xfffff0ff
 80021c8:	ffff8fff 	.word	0xffff8fff
 80021cc:	080024c4 	.word	0x080024c4
 80021d0:	20000000 	.word	0x20000000
 80021d4:	20000004 	.word	0x20000004

080021d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80021de:	4b1c      	ldr	r3, [pc, #112]	; (8002250 <HAL_RCC_GetSysClockFreq+0x78>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	2238      	movs	r2, #56	; 0x38
 80021e4:	4013      	ands	r3, r2
 80021e6:	d10f      	bne.n	8002208 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80021e8:	4b19      	ldr	r3, [pc, #100]	; (8002250 <HAL_RCC_GetSysClockFreq+0x78>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	0adb      	lsrs	r3, r3, #11
 80021ee:	2207      	movs	r2, #7
 80021f0:	4013      	ands	r3, r2
 80021f2:	2201      	movs	r2, #1
 80021f4:	409a      	lsls	r2, r3
 80021f6:	0013      	movs	r3, r2
 80021f8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80021fa:	6839      	ldr	r1, [r7, #0]
 80021fc:	4815      	ldr	r0, [pc, #84]	; (8002254 <HAL_RCC_GetSysClockFreq+0x7c>)
 80021fe:	f7fd ff83 	bl	8000108 <__udivsi3>
 8002202:	0003      	movs	r3, r0
 8002204:	607b      	str	r3, [r7, #4]
 8002206:	e01e      	b.n	8002246 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002208:	4b11      	ldr	r3, [pc, #68]	; (8002250 <HAL_RCC_GetSysClockFreq+0x78>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	2238      	movs	r2, #56	; 0x38
 800220e:	4013      	ands	r3, r2
 8002210:	2b08      	cmp	r3, #8
 8002212:	d102      	bne.n	800221a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002214:	4b10      	ldr	r3, [pc, #64]	; (8002258 <HAL_RCC_GetSysClockFreq+0x80>)
 8002216:	607b      	str	r3, [r7, #4]
 8002218:	e015      	b.n	8002246 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800221a:	4b0d      	ldr	r3, [pc, #52]	; (8002250 <HAL_RCC_GetSysClockFreq+0x78>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	2238      	movs	r2, #56	; 0x38
 8002220:	4013      	ands	r3, r2
 8002222:	2b20      	cmp	r3, #32
 8002224:	d103      	bne.n	800222e <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002226:	2380      	movs	r3, #128	; 0x80
 8002228:	021b      	lsls	r3, r3, #8
 800222a:	607b      	str	r3, [r7, #4]
 800222c:	e00b      	b.n	8002246 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800222e:	4b08      	ldr	r3, [pc, #32]	; (8002250 <HAL_RCC_GetSysClockFreq+0x78>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	2238      	movs	r2, #56	; 0x38
 8002234:	4013      	ands	r3, r2
 8002236:	2b18      	cmp	r3, #24
 8002238:	d103      	bne.n	8002242 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800223a:	23fa      	movs	r3, #250	; 0xfa
 800223c:	01db      	lsls	r3, r3, #7
 800223e:	607b      	str	r3, [r7, #4]
 8002240:	e001      	b.n	8002246 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 8002242:	2300      	movs	r3, #0
 8002244:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 8002246:	687b      	ldr	r3, [r7, #4]
}
 8002248:	0018      	movs	r0, r3
 800224a:	46bd      	mov	sp, r7
 800224c:	b002      	add	sp, #8
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40021000 	.word	0x40021000
 8002254:	02dc6c00 	.word	0x02dc6c00
 8002258:	007a1200 	.word	0x007a1200

0800225c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002264:	2313      	movs	r3, #19
 8002266:	18fb      	adds	r3, r7, r3
 8002268:	2200      	movs	r2, #0
 800226a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800226c:	2312      	movs	r3, #18
 800226e:	18fb      	adds	r3, r7, r3
 8002270:	2200      	movs	r2, #0
 8002272:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	2380      	movs	r3, #128	; 0x80
 800227a:	029b      	lsls	r3, r3, #10
 800227c:	4013      	ands	r3, r2
 800227e:	d100      	bne.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002280:	e079      	b.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002282:	2011      	movs	r0, #17
 8002284:	183b      	adds	r3, r7, r0
 8002286:	2200      	movs	r2, #0
 8002288:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800228a:	4b64      	ldr	r3, [pc, #400]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800228c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800228e:	2380      	movs	r3, #128	; 0x80
 8002290:	055b      	lsls	r3, r3, #21
 8002292:	4013      	ands	r3, r2
 8002294:	d110      	bne.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002296:	4b61      	ldr	r3, [pc, #388]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002298:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800229a:	4b60      	ldr	r3, [pc, #384]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800229c:	2180      	movs	r1, #128	; 0x80
 800229e:	0549      	lsls	r1, r1, #21
 80022a0:	430a      	orrs	r2, r1
 80022a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80022a4:	4b5d      	ldr	r3, [pc, #372]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80022a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022a8:	2380      	movs	r3, #128	; 0x80
 80022aa:	055b      	lsls	r3, r3, #21
 80022ac:	4013      	ands	r3, r2
 80022ae:	60bb      	str	r3, [r7, #8]
 80022b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022b2:	183b      	adds	r3, r7, r0
 80022b4:	2201      	movs	r2, #1
 80022b6:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 80022b8:	4b58      	ldr	r3, [pc, #352]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80022ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022bc:	23c0      	movs	r3, #192	; 0xc0
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4013      	ands	r3, r2
 80022c2:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d019      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	697a      	ldr	r2, [r7, #20]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d014      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 80022d4:	4b51      	ldr	r3, [pc, #324]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80022d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d8:	4a51      	ldr	r2, [pc, #324]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80022da:	4013      	ands	r3, r2
 80022dc:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022de:	4b4f      	ldr	r3, [pc, #316]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80022e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022e2:	4b4e      	ldr	r3, [pc, #312]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80022e4:	2180      	movs	r1, #128	; 0x80
 80022e6:	0249      	lsls	r1, r1, #9
 80022e8:	430a      	orrs	r2, r1
 80022ea:	65da      	str	r2, [r3, #92]	; 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022ec:	4b4b      	ldr	r3, [pc, #300]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80022ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022f0:	4b4a      	ldr	r3, [pc, #296]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80022f2:	494c      	ldr	r1, [pc, #304]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80022f4:	400a      	ands	r2, r1
 80022f6:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 80022f8:	4b48      	ldr	r3, [pc, #288]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	2201      	movs	r2, #1
 8002302:	4013      	ands	r3, r2
 8002304:	d016      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002306:	f7fe fbf7 	bl	8000af8 <HAL_GetTick>
 800230a:	0003      	movs	r3, r0
 800230c:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800230e:	e00c      	b.n	800232a <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002310:	f7fe fbf2 	bl	8000af8 <HAL_GetTick>
 8002314:	0002      	movs	r2, r0
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	4a43      	ldr	r2, [pc, #268]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d904      	bls.n	800232a <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 8002320:	2313      	movs	r3, #19
 8002322:	18fb      	adds	r3, r7, r3
 8002324:	2203      	movs	r2, #3
 8002326:	701a      	strb	r2, [r3, #0]
          break;
 8002328:	e004      	b.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800232a:	4b3c      	ldr	r3, [pc, #240]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800232c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800232e:	2202      	movs	r2, #2
 8002330:	4013      	ands	r3, r2
 8002332:	d0ed      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 8002334:	2313      	movs	r3, #19
 8002336:	18fb      	adds	r3, r7, r3
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d10a      	bne.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800233e:	4b37      	ldr	r3, [pc, #220]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002342:	4a37      	ldr	r2, [pc, #220]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002344:	4013      	ands	r3, r2
 8002346:	0019      	movs	r1, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	699a      	ldr	r2, [r3, #24]
 800234c:	4b33      	ldr	r3, [pc, #204]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800234e:	430a      	orrs	r2, r1
 8002350:	65da      	str	r2, [r3, #92]	; 0x5c
 8002352:	e005      	b.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002354:	2312      	movs	r3, #18
 8002356:	18fb      	adds	r3, r7, r3
 8002358:	2213      	movs	r2, #19
 800235a:	18ba      	adds	r2, r7, r2
 800235c:	7812      	ldrb	r2, [r2, #0]
 800235e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002360:	2311      	movs	r3, #17
 8002362:	18fb      	adds	r3, r7, r3
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d105      	bne.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800236a:	4b2c      	ldr	r3, [pc, #176]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800236c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800236e:	4b2b      	ldr	r3, [pc, #172]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002370:	492e      	ldr	r1, [pc, #184]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002372:	400a      	ands	r2, r1
 8002374:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2201      	movs	r2, #1
 800237c:	4013      	ands	r3, r2
 800237e:	d009      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002380:	4b26      	ldr	r3, [pc, #152]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002384:	2203      	movs	r2, #3
 8002386:	4393      	bics	r3, r2
 8002388:	0019      	movs	r1, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	4b23      	ldr	r3, [pc, #140]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002390:	430a      	orrs	r2, r1
 8002392:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2240      	movs	r2, #64	; 0x40
 800239a:	4013      	ands	r3, r2
 800239c:	d009      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800239e:	4b1f      	ldr	r3, [pc, #124]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80023a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a2:	4a23      	ldr	r2, [pc, #140]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80023a4:	4013      	ands	r3, r2
 80023a6:	0019      	movs	r1, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	68da      	ldr	r2, [r3, #12]
 80023ac:	4b1b      	ldr	r3, [pc, #108]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80023ae:	430a      	orrs	r2, r1
 80023b0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	2380      	movs	r3, #128	; 0x80
 80023b8:	01db      	lsls	r3, r3, #7
 80023ba:	4013      	ands	r3, r2
 80023bc:	d008      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023be:	4b17      	ldr	r3, [pc, #92]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80023c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	0899      	lsrs	r1, r3, #2
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	695a      	ldr	r2, [r3, #20]
 80023ca:	4b14      	ldr	r3, [pc, #80]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80023cc:	430a      	orrs	r2, r1
 80023ce:	655a      	str	r2, [r3, #84]	; 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	2380      	movs	r3, #128	; 0x80
 80023d6:	011b      	lsls	r3, r3, #4
 80023d8:	4013      	ands	r3, r2
 80023da:	d009      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80023dc:	4b0f      	ldr	r3, [pc, #60]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80023de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e0:	4a14      	ldr	r2, [pc, #80]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80023e2:	4013      	ands	r3, r2
 80023e4:	0019      	movs	r1, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	691a      	ldr	r2, [r3, #16]
 80023ea:	4b0c      	ldr	r3, [pc, #48]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80023ec:	430a      	orrs	r2, r1
 80023ee:	655a      	str	r2, [r3, #84]	; 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	da09      	bge.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 80023f8:	4b08      	ldr	r3, [pc, #32]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	22e0      	movs	r2, #224	; 0xe0
 80023fe:	4393      	bics	r3, r2
 8002400:	0019      	movs	r1, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685a      	ldr	r2, [r3, #4]
 8002406:	4b05      	ldr	r3, [pc, #20]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002408:	430a      	orrs	r2, r1
 800240a:	601a      	str	r2, [r3, #0]
  }
  return status;
 800240c:	2312      	movs	r3, #18
 800240e:	18fb      	adds	r3, r7, r3
 8002410:	781b      	ldrb	r3, [r3, #0]
}
 8002412:	0018      	movs	r0, r3
 8002414:	46bd      	mov	sp, r7
 8002416:	b006      	add	sp, #24
 8002418:	bd80      	pop	{r7, pc}
 800241a:	46c0      	nop			; (mov r8, r8)
 800241c:	40021000 	.word	0x40021000
 8002420:	fffffcff 	.word	0xfffffcff
 8002424:	fffeffff 	.word	0xfffeffff
 8002428:	00001388 	.word	0x00001388
 800242c:	efffffff 	.word	0xefffffff
 8002430:	ffffcfff 	.word	0xffffcfff
 8002434:	ffff3fff 	.word	0xffff3fff

08002438 <__libc_init_array>:
 8002438:	b570      	push	{r4, r5, r6, lr}
 800243a:	2600      	movs	r6, #0
 800243c:	4d0c      	ldr	r5, [pc, #48]	; (8002470 <__libc_init_array+0x38>)
 800243e:	4c0d      	ldr	r4, [pc, #52]	; (8002474 <__libc_init_array+0x3c>)
 8002440:	1b64      	subs	r4, r4, r5
 8002442:	10a4      	asrs	r4, r4, #2
 8002444:	42a6      	cmp	r6, r4
 8002446:	d109      	bne.n	800245c <__libc_init_array+0x24>
 8002448:	2600      	movs	r6, #0
 800244a:	f000 f821 	bl	8002490 <_init>
 800244e:	4d0a      	ldr	r5, [pc, #40]	; (8002478 <__libc_init_array+0x40>)
 8002450:	4c0a      	ldr	r4, [pc, #40]	; (800247c <__libc_init_array+0x44>)
 8002452:	1b64      	subs	r4, r4, r5
 8002454:	10a4      	asrs	r4, r4, #2
 8002456:	42a6      	cmp	r6, r4
 8002458:	d105      	bne.n	8002466 <__libc_init_array+0x2e>
 800245a:	bd70      	pop	{r4, r5, r6, pc}
 800245c:	00b3      	lsls	r3, r6, #2
 800245e:	58eb      	ldr	r3, [r5, r3]
 8002460:	4798      	blx	r3
 8002462:	3601      	adds	r6, #1
 8002464:	e7ee      	b.n	8002444 <__libc_init_array+0xc>
 8002466:	00b3      	lsls	r3, r6, #2
 8002468:	58eb      	ldr	r3, [r5, r3]
 800246a:	4798      	blx	r3
 800246c:	3601      	adds	r6, #1
 800246e:	e7f2      	b.n	8002456 <__libc_init_array+0x1e>
 8002470:	08002504 	.word	0x08002504
 8002474:	08002504 	.word	0x08002504
 8002478:	08002504 	.word	0x08002504
 800247c:	08002508 	.word	0x08002508

08002480 <memset>:
 8002480:	0003      	movs	r3, r0
 8002482:	1882      	adds	r2, r0, r2
 8002484:	4293      	cmp	r3, r2
 8002486:	d100      	bne.n	800248a <memset+0xa>
 8002488:	4770      	bx	lr
 800248a:	7019      	strb	r1, [r3, #0]
 800248c:	3301      	adds	r3, #1
 800248e:	e7f9      	b.n	8002484 <memset+0x4>

08002490 <_init>:
 8002490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002492:	46c0      	nop			; (mov r8, r8)
 8002494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002496:	bc08      	pop	{r3}
 8002498:	469e      	mov	lr, r3
 800249a:	4770      	bx	lr

0800249c <_fini>:
 800249c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800249e:	46c0      	nop			; (mov r8, r8)
 80024a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024a2:	bc08      	pop	{r3}
 80024a4:	469e      	mov	lr, r3
 80024a6:	4770      	bx	lr
